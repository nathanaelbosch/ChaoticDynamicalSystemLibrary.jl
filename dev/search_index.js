var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ChaoticDynamicalSystemLibrary","category":"page"},{"location":"#ChaoticDynamicalSystemLibrary.jl","page":"Home","title":"ChaoticDynamicalSystemLibrary.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ChaoticDynamicalSystemLibrary.jl is a collection of chaotic dynamical systems for the Julia SciML ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is a partial port of the dysts Python package developed by William Gilpin. It implements many (but not all) of the same systems, but does not provide any functionality to simulate them. In contrast to dysts, the main focus of this package is not to be a benchmark for general time-series ML models, but only to provide a collection of ODEs. Their simulation is left to other packages, such as DifferentialEquations.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"William Gilpin deserves most of the credit for this package. He is the original author of the dysts, and without dysts this package would not exist.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Full-list-of-all-dynamical-systems:","page":"Home","title":"Full list of all dynamical systems:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ChaoticDynamicalSystemLibrary]\nPublic = false\nPages   = [\"chaotic_attractors.jl\"]","category":"page"},{"location":"#ChaoticDynamicalSystemLibrary.Aizawa","page":"Home","title":"ChaoticDynamicalSystemLibrary.Aizawa","text":"   Aizawa()\n\nA torus-like attractor related to the forced Lorenz system.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.3501297618370773\nLyapunov spectrum (estimated): Any[0.08947878317195473, 0.020305496211675024, -0.3090729926541944]\nMaximum Lyapunov exponent (estimated): 0.13489555530106362\nMultiscale Entropy: 0.514512246123007\nNon-autonomous: false\nPeriod: 2.5837\nPesin entropy: 0.10978427938362978\n\nReferences\n\nAizawa, Yoji, and Tatsuya Uezu (1982). Topological Aspects in Chaos and in 2 k-Period Doubling Cascade. Progress of Theoretical Physics 67.3 (1982): 982-985. See also Langford (1984). Numerical studies of torus bifurcations. Numerical Methods for Bifurcation Problems. Birkhauser, Basel, 1984. 285-295.\n\nOriginal code from the dysts Python package\n\nclass Aizawa(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d, e, f):\n        xdot = x * z - b * x - d * y\n        ydot = d * x + y * z - b * y\n        zdot = c + a * z - 0.333333333333333333 * z ** 3 - x ** 2 - y ** 2 - e * z * x ** 2 - e * z * y ** 2 + f * z * x ** 3\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.AnishchenkoAstakhov","page":"Home","title":"ChaoticDynamicalSystemLibrary.AnishchenkoAstakhov","text":"   AnishchenkoAstakhov()\n\nStochastic resonance in forced oscillators.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0916403758729327\nLyapunov spectrum (estimated): Any[0.039777554890210017, 0.0008785544495802295, -0.44025308728606666]\nMaximum Lyapunov exponent (estimated): 0.10107726791527546\nMultiscale Entropy: 0.7612343892027325\nNon-autonomous: false\nPeriod: 6.814\nPesin entropy: 0.040715925817307534\n\nReferences\n\nAnishchenko, et al. Nonlinear dynamics of chaotic and stochastic systems: tutorial and modern developments. 2007.\n\nOriginal code from the dysts Python package\n\nclass AnishchenkoAstakhov(DynSys):\n    def rhs(self, X, t):\n        x, y, z = X\n        mu, eta = self.mu, self.eta\n        xdot = mu * x + y - x * z\n        ydot = -x\n        zdot = -eta * z + eta * np.heaviside(x, 0) * x ** 2\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Arneodo","page":"Home","title":"ChaoticDynamicalSystemLibrary.Arneodo","text":"   Arneodo()\n\nA modified Lotka-Volterra ecosystem, also known as the ACT attractor.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.198607392233255\nLyapunov spectrum (estimated): Any[0.24285661379003065, -0.0006168721448237418, -1.2169777901647385]\nMaximum Lyapunov exponent (estimated): 0.23737468667051287\nMultiscale Entropy: 0.7388404221540498\nNon-autonomous: false\nPeriod: 3.1641\nPesin entropy: 0.2428749592514372\n\nReferences\n\nArneodo, A., Coullet, P. & Tresser, C. Occurence of strange attractors in three-dimensional Volterra equations. Physics Letters A 79, 259â€“263 (1980)\n\nOriginal code from the dysts Python package\n\nclass Arneodo(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d):\n        xdot = y\n        ydot = z\n        zdot = -a * x - b * y - c * z + d * x ** 3\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ArnoldBeltramiChildress","page":"Home","title":"ChaoticDynamicalSystemLibrary.ArnoldBeltramiChildress","text":"   ArnoldBeltramiChildress()\n\nAn exact solution of Euler's equation for inviscid flow in 3D. Often referred to as the ABC flow.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.612281260580053\nLyapunov spectrum (estimated): Any[1.47222087191395, -0.01824039630029517, -2.378562986862767]\nMaximum Lyapunov exponent (estimated): 0.3667300080060703\nMultiscale Entropy: 1.2759526834024162\nNon-autonomous: false\nPeriod: 2.8508\nPesin entropy: 1.47222087191395\n\nReferences\n\nV. I. Arnold, Journal of Applied Mathematics and Mechanics 30, 223 (1966).\n\nOriginal code from the dysts Python package\n\nclass ArnoldBeltramiChildress(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        dx = a * np.sin(z) + c * np.cos(y)\n        dy = b * np.sin(x) + a * np.cos(z)\n        dz = c * np.sin(y) + b * np.cos(x)\n        return dx, dy, dz\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return np.sin(x), np.cos(y), np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ArnoldWeb","page":"Home","title":"ChaoticDynamicalSystemLibrary.ArnoldWeb","text":"   ArnoldWeb()\n\nA quasi-integrable system that transitions to Chirikov diffusive dynamics when perturbed.\n\nStats\n\nEmbedding dimension: 5\nHamiltonian: true\nKaplan-Yorke dimension: 22.554733912627043\nLyapunov spectrum (estimated): Any[0.06266308160064184, 0.0032177165561558833, 0.0011281526899086728, -0.00233619507966634, -0.0039196281630406]\nMaximum Lyapunov exponent (estimated): 0.06514413995171335\nMultiscale Entropy: 0.620621428966386\nNon-autonomous: true\nPeriod: 67.25\nPesin entropy: 0.06706808893310089\n\nReferences\n\nFroeschle, C., Guzzo, M. & Legga, E (2000). Graphical evolution of the Arnold web: From order to chaos. Science 289.\n\nOriginal code from the dysts Python package\n\nclass ArnoldWeb(DynSys):\n    @staticjit\n    def _rhs(p1, p2, x1, x2, z, t, mu, w):\n        denom = 4 + np.cos(z) + np.cos(x1) + np.cos(x2)\n        p1dot = -mu * np.sin(x1) / denom ** 2\n        p2dot = -mu * np.sin(x2) / denom ** 2\n        x1dot = p1\n        x2dot = p2\n        zdot = w\n        return p1dot, p2dot, x1dot, x2dot, zdot\n\n    @staticjit\n    def _postprocessing(p1, p2, x1, x2, z):\n        return p1, p2, np.sin(x1), np.sin(x2), np.cos(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.AtmosphericRegime","page":"Home","title":"ChaoticDynamicalSystemLibrary.AtmosphericRegime","text":"   AtmosphericRegime()\n\nA model of regime transition in atmospheric flows. Contains widely-separated timescales due a quadratic term, which itself arises from a conservation law.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1859596374283137\nLyapunov spectrum (estimated): nothing\nMaximum Lyapunov exponent (estimated): 0.010543274932274862\nMultiscale Entropy: 0.4278776303819699\nNon-autonomous: false\nPeriod: 89.59496756697331\nPesin entropy: 0.3055574134566322\n\nReferences\n\nTuwankotta (2006). Chaos in a coupled oscillators system with widely spaced frequencies and energy-preserving non-linearity\n\nOriginal code from the dysts Python package\n\nclass AtmosphericRegime(DynSys):\n    @staticjit\n    def _rhs(\n        x, y, z, t, alpha, beta, mu1, mu2, omega, sigma\n    ):\n        xdot = mu1 * x + sigma * x * y\n        ydot = mu2 * y + omega * z + alpha * y * z + beta * z ** 2 - sigma * x ** 2\n        zdot = mu2 * z - omega * y - alpha * y ** 2 - beta * y * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.BeerRNN","page":"Home","title":"ChaoticDynamicalSystemLibrary.BeerRNN","text":"   BeerRNN()\n\nA two-neuron minimal model nervous system.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0303797735862443\nLyapunov spectrum (estimated): Any[0.016274571192515633, -0.00011803510272572572, -0.5318869010933206]\nMaximum Lyapunov exponent (estimated): 0.038767800131815223\nMultiscale Entropy: 0.5244807630539362\nNon-autonomous: false\nPeriod: 181.58\nPesin entropy: 0.01647451962951782\n\nReferences\n\nBeer, R. D. (1995). On the dynamics of small continuous-time recurrent neural networks. Adapt. Behav., 3(4), 4692013509.\n\nOriginal code from the dysts Python package\n\nclass BeerRNN(DynSys):\n    @staticjit\n    def _sig(x):\n        return 1.0 / (1.0 + np.exp(-x))\n\n    def rhs(self, X, t):\n        Xdot = (-X + np.matmul(self.w, self._sig(X + self.theta))) / self.tau\n        return Xdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.BelousovZhabotinsky","page":"Home","title":"ChaoticDynamicalSystemLibrary.BelousovZhabotinsky","text":"   BelousovZhabotinsky()\n\nA reduced-order model of the BZ reaction that exhibits period doubling. The bifurcation parameter for controlling the onset of chaos is kf. The system undergoes regular cycling when kf=3e-4, and chaotic oscillations when kf=3.5e-4\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0206505961796535\nLyapunov spectrum (estimated): Any[114.64513768787073, -0.4669861532822692, -5529.048679334775]\nMaximum Lyapunov exponent (estimated): 132.08766434104578\nMultiscale Entropy: 0.8764191281600929\nNon-autonomous: false\nPeriod: 0.018257\nPesin entropy: 114.64513768787073\n\nReferences\n\nGyorgyi and Field (1992). A three-variable model of deterministic chaos in the Belousov-Zhabotinsky reaction. Nature.\n\nOriginal code from the dysts Python package\n\nclass BelousovZhabotinsky(DynSys):\n    @staticjit\n    def _rhs(\n        x,\n        z,\n        v,\n        t,\n        c1,\n        c10,\n        c11,\n        c12,\n        c13,\n        c2,\n        c3,\n        c4,\n        c5,\n        c6,\n        c7,\n        c8,\n        c9,\n        ci,\n        kf,\n        t0,\n        y0,\n        yb1,\n        yb2,\n        yb3,\n        z0,\n    ):\n        ybar = (1 / y0) * yb1 * z * v / (yb2 * x + yb3 + kf)\n        if x < 0.0:\n            x = 0\n        rf = (ci - z0 * z) * np.sqrt(x)\n        xdot = c1 * x * ybar + c2 * ybar + c3 * x ** 2 + c4 * rf + c5 * x * z - kf * x\n        zdot = (c6 / z0) * rf + c7 * x * z + c8 * z * v + c9 * z - kf * z\n        vdot = c10 * x * ybar + c11 * ybar + c12 * x ** 2 + c13 * z * v - kf * v\n        return xdot * t0, zdot * t0, vdot * t0\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.BickleyJet","page":"Home","title":"ChaoticDynamicalSystemLibrary.BickleyJet","text":"   BickleyJet()\n\nA zonal jet passing between two counter rotating vortices. A steady Hamiltonian with a time-dependent perturbation.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: true\nKaplan-Yorke dimension: 4.066710025133773\nLyapunov spectrum (estimated): Any[1.9651794377408363e-7, 2.5409880958463764e-9, -9.631983584415862e-8]\nMaximum Lyapunov exponent (estimated): 3.0318672544949706e-6\nMultiscale Entropy: 0.733566708397195\nNon-autonomous: false\nPeriod: 87826.57\nPesin entropy: 1.99059498764899e-7\n\nReferences\n\nHadjighasem, Karrasch, Teramoto, Haller (2016). A Spectral Clustering Approach to Lagrangian Vortex Detection Phys Rev E.\n\nOriginal code from the dysts Python package\n\nclass BickleyJet(DynSys):\n    @staticjit\n    def _rhs(y, x, z, t, ell, eps, k, omega, sigma, u):\n        sechy = 1 / np.cosh(y / ell)\n        inds = np.arange(3)\n        un = k[inds] * (x - z * sigma[inds])\n        dx = u * sechy ** 2 * (-1 - 2 * np.dot(np.cos(un), eps) * np.tanh(y / ell))\n        dy = ell * u * sechy ** 2 * np.dot(eps * k, np.sin(un))\n        dz = omega\n        return dy, dx, dz\n\n    def _postprocessing(self, x, y, z):\n        km = np.min(self.k)\n        sm = np.min(self.sigma)\n        return x, np.sin(km * y), np.sin(self.omega * z * km * sm)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Blasius","page":"Home","title":"ChaoticDynamicalSystemLibrary.Blasius","text":"   Blasius()\n\nA chaotic food web composed of interacting predators,, consumers, and vegetation.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.016657959617314\nLyapunov spectrum (estimated): Any[0.04712755400915782, 0.001803137034352918, -2.9362739640325555]\nMaximum Lyapunov exponent (estimated): 0.12597339364128174\nMultiscale Entropy: 0.5917316835585642\nNon-autonomous: false\nPeriod: 6.6038\nPesin entropy: 0.04893069104351076\n\nReferences\n\nBlasius, Huppert, Stone. Nature 1999\n\nOriginal code from the dysts Python package\n\nclass Blasius(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, alpha1, alpha2, b, c, k1, k2, zs):\n        xdot = a * x - alpha1 * x * y / (1 + k1 * x)\n        ydot = -b * y + alpha1 * x * y / (1 + k1 * x) - alpha2 * y * z / (1 + k2 * y)\n        zdot = -c * (z - zs) + alpha2 * y * z / (1 + k2 * y)\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.BlinkingRotlet","page":"Home","title":"ChaoticDynamicalSystemLibrary.BlinkingRotlet","text":"   BlinkingRotlet()\n\nThe location of the mixer is chosen so that there is a stagnation point at its symmetric complement. Solution is given in polar coordinates (r, theta).\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: true\nKaplan-Yorke dimension: 2.910902586026695\nLyapunov spectrum (estimated): Any[5.609358269449125, 0.007963961496808246, -6.16801583110239]\nMaximum Lyapunov exponent (estimated): 2.120338159738003\nMultiscale Entropy: 1.2895030395332947\nNon-autonomous: true\nPeriod: 2.9520625\nPesin entropy: 5.617567417119514\n\nReferences\n\nMeleshko & Aref. A blinking rotlet model for chaotic advection. Physics of Fluids 1996. See also Tallapragada and Sudarsanam PRE 2019\n\nOriginal code from the dysts Python package\n\nclass BlinkingRotlet(DynSys):\n    @staticjit\n    def _rotlet(r, theta, a, b, bc):\n        \"\"\"A rotlet velocity field\"\"\"\n        kappa = a ** 2 + (b ** 2 * r ** 2) / a ** 2 - 2 * b * r * np.cos(theta)\n        gamma = (1 - r ** 2 / a ** 2) * (a ** 2 - (b ** 2 * r ** 2) / a ** 2)\n        iota = (b ** 2 * r) / a ** 2 - b * np.cos(theta)\n        zeta = b ** 2 + r ** 2 - 2 * b * r * np.cos(theta)\n        nu = a ** 2 + b ** 2 - (2 * b ** 2 * r ** 2) / a ** 2\n        vr = b * np.sin(theta) * (-bc * (gamma / kappa ** 2) - 1 / kappa + 1 / zeta)\n        vth = (\n            bc * (gamma * iota) / kappa ** 2\n            + bc * r * nu / (a ** 2 * kappa)\n            + iota / kappa\n            - (r - b * np.cos(theta)) / zeta\n        )\n        return vr, vth\n\n    @staticjit\n    def _protocol(t, tau, stiffness=20):\n        return 0.5 + 0.5 * np.tanh(tau * stiffness * np.sin(2 * np.pi * t / tau))\n\n    def rhs(self, X, t):\n        r, theta, tt = X\n        weight = self._protocol(tt, self.tau)\n        dr1, dth1 = self._rotlet(r, theta, self.a, self.b, self.bc)\n        dr2, dth2 = self._rotlet(r, theta, self.a, -self.b, self.bc)\n        dr = weight * dr1 + (1 - weight) * dr2\n        dth = (weight * dth1 + (1 - weight) * dth2) / r\n        dtt = 1\n        return self.sigma * dr, self.sigma * dth, dtt\n\n    def _postprocessing(self, r, th, tt):\n        return r * np.cos(th), r * np.sin(th), np.sin(2 * np.pi * tt / self.tau)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Bouali2","page":"Home","title":"ChaoticDynamicalSystemLibrary.Bouali2","text":"   Bouali2()\n\nA modified economic cycle model.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 16.471858210544983\nLyapunov spectrum (estimated): Any[0.020389225004628773, 0.0033455417942589724, -0.009602768742817189]\nMaximum Lyapunov exponent (estimated): 0.07681730213975516\nMultiscale Entropy: 0.4520009826326611\nNon-autonomous: false\nPeriod: 2.6779\nPesin entropy: 0.02439941982137089\n\nReferences\n\nBouali (1999). Feedback loop in extended Van der Pols equation applied to an economic model of cycles. International Journal of Bifurkation and Chaos, Vol. 9, No. 4\n\nOriginal code from the dysts Python package\n\nclass Bouali2(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, bb, c, g, m, y0):\n        xdot = a * y0 * x - a * x * y - b * z\n        ydot = -g * y + g * y * x ** 2\n        zdot = -1.5 * m * x + m * bb * x * z - c * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.BurkeShaw","page":"Home","title":"ChaoticDynamicalSystemLibrary.BurkeShaw","text":"   BurkeShaw()\n\nA scroll-like attractor with unique symmetry along the z axis.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2113447891991065\nLyapunov spectrum (estimated): Any[2.3453555864112117, 0.027056468824027846, -11.225316054517004]\nMaximum Lyapunov exponent (estimated): 2.324596351534631\nMultiscale Entropy: 0.906432166797223\nNon-autonomous: false\nPeriod: 0.78333\nPesin entropy: 2.37241205523524\n\nReferences\n\nShaw (1981). Zeitschrift fur Naturforschung.\n\nOriginal code from the dysts Python package\n\nclass BurkeShaw(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, e, n):\n        xdot = -n * x - n * y\n        ydot = y - n * x * z\n        zdot = n * x * y + e\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.CaTwoPlus","page":"Home","title":"ChaoticDynamicalSystemLibrary.CaTwoPlus","text":"   CaTwoPlus()\n\nIntracellular calcium ion oscillations.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0647813731079956\nLyapunov spectrum (estimated): Any[0.5788123099350391, 0.022652249040266133, -9.284523260554844]\nMaximum Lyapunov exponent (estimated): 0.5802865327706731\nMultiscale Entropy: 0.5770296569860646\nNon-autonomous: false\nPeriod: 1.343\nPesin entropy: 0.6014645592138562\n\nReferences\n\nHouart, Dupont, Goldbeter. Bull Math Biol 1999.\n\nOriginal code from the dysts Python package\n\nclass CaTwoPlus(DynSys):\n    def rhs(self, X, t):\n        z, y, a = X\n        Vin = self.V0 + self.V1 * self.beta\n        V2 = self.Vm2 * (z ** 2) / (self.K2 ** 2 + z ** 2)\n        V3 = (\n            (self.Vm3 * (z ** self.m) / (self.Kz ** self.m + z ** self.m))\n            * (y ** 2 / (self.Ky ** 2 + y ** 2))\n            * (a ** 4 / (self.Ka ** 4 + a ** 4))\n        )\n        V5 = (\n            self.Vm5\n            * (a ** self.p / (self.K5 ** self.p + a ** self.p))\n            * (z ** self.n / (self.Kd ** self.n + z ** self.n))\n        )\n        zdot = Vin - V2 + V3 + self.kf * y - self.k * z\n        ydot = V2 - V3 - self.kf * y\n        adot = self.beta * self.V4 - V5 - self.eps * a\n        return (zdot, ydot, adot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.CellCycle","page":"Home","title":"ChaoticDynamicalSystemLibrary.CellCycle","text":"   CellCycle()\n\nA simplified model of the cell cycle. The parameter Kim controls the bifurcations.\n\nStats\n\nEmbedding dimension: 6\nHamiltonian: false\nKaplan-Yorke dimension: 2.020810681242375\nLyapunov spectrum (estimated): Any[0.00469985418122158, -0.0003567612310661562, -0.20915644240415007, -0.43394905365820846, -2.850536314608979, -6.767614340964144]\nMaximum Lyapunov exponent (estimated): 0.010172128409635746\nMultiscale Entropy: 1.021736994304444\nNon-autonomous: false\nPeriod: 204.71\nPesin entropy: 0.004765100518900255\n\nReferences\n\nRomond, Rustici, Gonze, Goldbeter. 1999.\n\nOriginal code from the dysts Python package\n\nclass CellCycle(DynSys):\n    def rhs(self, X, t):\n        c1, m1, x1, c2, m2, x2 = X\n        Vm1, Um1 = 2 * [self.Vm1]\n        vi1, vi2 = 2 * [self.vi]\n        H1, H2, H3, H4 = 4 * [self.K]\n        K1, K2, K3, K4 = 4 * [self.K]\n        V2, U2 = 2 * [self.V2]\n        Vm3, Um3 = 2 * [self.Vm3]\n        V4, U4 = 2 * [self.V4]\n        Kc1, Kc2 = 2 * [self.Kc]\n        vd1, vd2 = 2 * [self.vd]\n        Kd1, Kd2 = 2 * [self.Kd1]\n        kd1, kd2 = 2 * [self.kd1]\n        Kim1, Kim2 = 2 * [self.Kim]\n        V1 = Vm1 * c1 / (Kc1 + c1)\n        U1 = Um1 * c2 / (Kc2 + c2)\n        V3 = m1 * Vm3\n        U3 = m2 * Um3\n        c1dot = vi1 * Kim1 / (Kim1 + m2) - vd1 * x1 * c1 / (Kd1 + c1) - kd1 * c1\n        c2dot = vi2 * Kim2 / (Kim2 + m1) - vd2 * x2 * c2 / (Kd2 + c2) - kd2 * c2\n        m1dot = V1 * (1 - m1) / (K1 + (1 - m1)) - V2 * m1 / (K2 + m1)\n        m2dot = U1 * (1 - m2) / (H1 + (1 - m2)) - U2 * m2 / (H2 + m2)\n        x1dot = V3 * (1 - x1) / (K3 + (1 - x1)) - V4 * x1 / (K4 + x1)\n        x2dot = U3 * (1 - x2) / (H3 + (1 - x2)) - U4 * x2 / (H4 + x2)\n        return c1dot, m1dot, x1dot, c2dot, m2dot, x2dot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.CellularNeuralNetwork","page":"Home","title":"ChaoticDynamicalSystemLibrary.CellularNeuralNetwork","text":"   CellularNeuralNetwork()\n\nCellular neural network dynamics.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.167668286708633\nLyapunov spectrum (estimated): Any[0.09799656528996928, 0.0036354952626342415, -0.6061495728157424]\nMaximum Lyapunov exponent (estimated): 2.3258468977096562\nMultiscale Entropy: 1.2414841874061011\nNon-autonomous: false\nPeriod: 3.2\nPesin entropy: 0.1016320623247746\n\nReferences\n\nArena, Caponetto, Fortuna, and Porto., Int J Bifurcat Chaos. 1998:  1527-1539.\n\nOriginal code from the dysts Python package\n\nclass CellularNeuralNetwork(DynSys):\n    @staticjit\n    def f(x):\n        return 0.5 * (np.abs(x + 1) - np.abs(x - 1))\n\n    def rhs(self, X, t):\n        x, y, z = X\n        xdot = -x + self.d * self.f(x) - self.b * self.f(y) - self.b * self.f(z)\n        ydot = -y - self.b * self.f(x) + self.c * self.f(y) - self.a * self.f(z)\n        zdot = -z - self.b * self.f(x) + self.a * self.f(y) + self.f(z)\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Chen","page":"Home","title":"ChaoticDynamicalSystemLibrary.Chen","text":"   Chen()\n\nA system based on feedback anti-control in engineering.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.168621926035506\nLyapunov spectrum (estimated): Any[2.0471208808332557, -0.05031354288886987, -11.841816202859391]\nMaximum Lyapunov exponent (estimated): 2.005961349488129\nMultiscale Entropy: 0.7604529380690989\nNon-autonomous: false\nPeriod: 0.58689\nPesin entropy: 2.047313967129477\n\nReferences\n\nChen (1997). Proc. First Int. Conf. Control of Oscillations and Chaos.\n\nOriginal code from the dysts Python package\n\nclass Chen(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = a * y - a * x\n        ydot = (c - a) * x - x * z + c * y\n        zdot = x * y - b * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ChenLee","page":"Home","title":"ChaoticDynamicalSystemLibrary.ChenLee","text":"   ChenLee()\n\nA rigid body with feedback anti-control.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0300416878282137\nLyapunov spectrum (estimated): Any[0.16460631102343384, 0.00018225769802326938, -5.485329903201408]\nMaximum Lyapunov exponent (estimated): 0.16363115430160305\nMultiscale Entropy: 0.6224325755254609\nNon-autonomous: false\nPeriod: 2.8043\nPesin entropy: 0.16478856872146466\n\nReferences\n\nChen HK, Lee CI (2004). Anti-control of chaos in rigid body motion. Chaos, Solitons & Fractals\n\nOriginal code from the dysts Python package\n\nclass ChenLee(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = a * x - y * z\n        ydot = b * y + x * z\n        zdot = c * z + 0.3333333333333333333333333 * x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Chua","page":"Home","title":"ChaoticDynamicalSystemLibrary.Chua","text":"   Chua()\n\nAn electronic circuit with a diode providing negative resistance.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.10727056025829\nLyapunov spectrum (estimated): Any[0.4605474829443073, 0.0022048281168492866, -4.319076735248446]\nMaximum Lyapunov exponent (estimated): 1.2301163591725595\nMultiscale Entropy: 1.2693527097629784\nNon-autonomous: false\nPeriod: 1.4235\nPesin entropy: 0.4645707969482971\n\nReferences\n\nChua, L. O. (1969) Introduction to Nonlinear Network Theory, McGraw-Hill, New York.\n\nOriginal code from the dysts Python package\n\nclass Chua(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, alpha, beta, m0, m1):\n        ramp_x = m1 * x + 0.5 * (m0 - m1) * (np.abs(x + 1) - np.abs(x - 1))\n        xdot = alpha * (y - x - ramp_x)\n        ydot = x - y + z\n        zdot = -beta * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.CircadianRhythm","page":"Home","title":"ChaoticDynamicalSystemLibrary.CircadianRhythm","text":"   CircadianRhythm()\n\nThe Drosophila circadian rhythm under periodic light/dark forcing.\n\nStats\n\nEmbedding dimension: 5\nHamiltonian: false\nKaplan-Yorke dimension: 2.640554412377753\nLyapunov spectrum (estimated): Any[0.09298369588063138, 0.00046501992305171574, -0.14586025062784352, -0.3598453092044599, -1.091393481159416]\nMaximum Lyapunov exponent (estimated): 0.006263277393890506\nMultiscale Entropy: 0.7054585345031309\nNon-autonomous: true\nPeriod: 27.0\nPesin entropy: 0.09372724379002938\n\nReferences\n\nLeloup, Gonze, Goldbeter. 1999. Gonze, Leloup, Goldbeter. 2000\n\nOriginal code from the dysts Python package\n\nclass CircadianRhythm(DynSys):\n    @staticjit\n    def _rhs(\n        m,\n        fc,\n        fs,\n        fn,\n        th,\n        t,\n        Ki,\n        k,\n        k1,\n        k2,\n        kd,\n        kdn,\n        km,\n        ks,\n        n,\n        vd,\n        vdn,\n        vm,\n        vmax,\n        vmin,\n        v,\n    ):\n        vs = 2.5 * ((0.5 + 0.5 * np.cos(th)) + vmin) * (vmax - vmin)\n        mdot = vs * (Ki ** n) / (Ki ** n + fn ** n) - vm * m / (km + m)\n        fcdot = ks * m - k1 * fc + k2 * fn - k * fc\n        fsdot = k * fc - vd * fs / (kd + fs)\n        fndot = k1 * fc - k2 * fn - vdn * fn / (kdn + fn)\n        thdot = 2 * np.pi / 24\n        return mdot, fcdot, fsdot, fndot, thdot\n\n    @staticjit\n    def _postprocessing(m, fc, fs, fn, th):\n        return m, fc, fs, fn, np.cos(th)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.CoevolvingPredatorPrey","page":"Home","title":"ChaoticDynamicalSystemLibrary.CoevolvingPredatorPrey","text":"   CoevolvingPredatorPrey()\n\nA system of predator-prey equations with co-evolving prey.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0026539580881706\nLyapunov spectrum (estimated): Any[0.0034879428860592264, 0.0017391810332012293, -1.9676998121970224]\nMaximum Lyapunov exponent (estimated): 0.00732698039035783\nMultiscale Entropy: 1.006450625395487\nNon-autonomous: false\nPeriod: 122.77\nPesin entropy: 0.005379136261058156\n\nReferences\n\nGilpin & Feldman (2017). PLOS Comp Biol\n\nOriginal code from the dysts Python package\n\nclass CoevolvingPredatorPrey(DynSys):\n    @staticjit\n    def _rhs(x, y, alpha, t, a1, a2, a3, b1, b2, d1, d2, delta, k1, k2, k4, vv):\n        xdot = x * (\n            -((a3 * y) / (1 + b2 * x))\n            + (a1 * alpha * (1 - k1 * x * (-alpha + alpha * delta))) / (1 + b1 * alpha)\n            - d1\n            * (\n                1\n                - k2 * (-(alpha ** 2) + (alpha * delta) ** 2)\n                + k4 * (-(alpha ** 4) + (alpha * delta) ** 4)\n            )\n        )\n        ydot = (-d2 + (a2 * x) / (1 + b2 * x)) * y\n        alphadot = vv * (\n            -((a1 * k1 * x * alpha * delta) / (1 + b1 * alpha))\n            - d1 * (-2 * k2 * alpha * delta ** 2 + 4 * k4 * alpha ** 3 * delta ** 4)\n        )\n        return xdot, ydot, alphadot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Colpitts","page":"Home","title":"ChaoticDynamicalSystemLibrary.Colpitts","text":"   Colpitts()\n\nAn electrical circuit used as a signal generator.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.134959031654127\nLyapunov spectrum (estimated): Any[0.13750285290669104, -0.0021021241106901328, -1.0014048629576902]\nMaximum Lyapunov exponent (estimated): 0.3736008151161584\nMultiscale Entropy: 0.7266290517682168\nNon-autonomous: false\nPeriod: 4.2676\nPesin entropy: 0.1390751886208436\n\nReferences\n\nKennedy (2007). IEEE Trans Circuits & Systems. 1994: 771-774. Li, Zhou, Yang. Chaos, Solitons, & Fractals.\n\nOriginal code from the dysts Python package\n\nclass Colpitts(DynSys):\n    def rhs(self, X, t):\n        x, y, z = X\n        u = z - (self.e - 1)\n        fz = -u * (1 - np.heaviside(u, 0))\n        xdot = y - self.a * fz\n        ydot = self.c - x - self.b * y - z\n        zdot = y - self.d * z\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Coullet","page":"Home","title":"ChaoticDynamicalSystemLibrary.Coullet","text":"   Coullet()\n\nA variant of the Arneodo attractor\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.252992250313846\nLyapunov spectrum (estimated): Any[0.14890693833273877, -6.504894715051528e-5, -0.5873658566804084]\nMaximum Lyapunov exponent (estimated): 0.13718762024831516\nMultiscale Entropy: 0.9055084400125268\nNon-autonomous: false\nPeriod: 5.7663\nPesin entropy: 0.14919849957322842\n\nReferences\n\nArneodo, A., Coullet, P. & Tresser, C. Occurence of strange attractors in three-dimensional volterra equations. Physics Letters A 79, 259â€“263 (1980)\n\nOriginal code from the dysts Python package\n\nclass Rucklidge(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = -a * x + b * y - y * z\n        ydot = x\n        zdot = -z + y ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Dadras","page":"Home","title":"ChaoticDynamicalSystemLibrary.Dadras","text":"   Dadras()\n\nAn electronic circuit capable of producing multiple attractors under bifurcations.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0430103150081735\nLyapunov spectrum (estimated): Any[0.47344233096408, 0.0064562720284210215, -11.157725546142514]\nMaximum Lyapunov exponent (estimated): 0.40591521049520063\nMultiscale Entropy: 0.8537980405426894\nNon-autonomous: false\nPeriod: 3.2886\nPesin entropy: 0.4798988304624064\n\nReferences\n\nS Dadras, HR Momeni (2009). A novel three-dimensional autonomous chaotic system generating two, three and four-scroll attractors. Physics Letters A.\n\nOriginal code from the dysts Python package\n\nclass Dadras(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, c, e, o, p, r):\n        xdot = y - p * x + o * y * z\n        ydot = r * y - x * z + z\n        zdot = c * x * y - e * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.DequanLi","page":"Home","title":"ChaoticDynamicalSystemLibrary.DequanLi","text":"   DequanLi()\n\nRelated to the Three Scroll unified attractor TSUCS-2\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.6848604732863537\nLyapunov spectrum (estimated): Any[1.8601963396884453, 0.09866428540326228, -2.867185439620747]\nMaximum Lyapunov exponent (estimated): 0.739747976641268\nMultiscale Entropy: 0.8319369667525882\nNon-autonomous: false\nPeriod: 0.083806\nPesin entropy: 1.9588606250917073\n\nReferences\n\nLi, Phys Lett A. 2008: 387-393.\n\nOriginal code from the dysts Python package\n\nclass DequanLi(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, c, d, eps, f, k):\n        xdot = a * y - a * x + d * x * z\n        ydot = k * x + f * y - x * z\n        zdot = c * z + x * y - eps * x ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.DoubleGyre","page":"Home","title":"ChaoticDynamicalSystemLibrary.DoubleGyre","text":"   DoubleGyre()\n\nA time-dependent fluid flow exhibiting Lagrangian coherent structures\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.881525629972418\nLyapunov spectrum (estimated): Any[0.06285936079346421, -0.0036702088073069326, -0.06633987533400756]\nMaximum Lyapunov exponent (estimated): 0.12185254082886439\nMultiscale Entropy: 0.66519273658672\nNon-autonomous: true\nPeriod: 13.953\nPesin entropy: 0.06285936079346421\n\nReferences\n\nShadden, Lekien, Marsden (2005). Definition and properties of Lagrangian coherent structures from finite-time Lyapunov exponents in two-dimensional aperiodic flows. Physica D.\n\nOriginal code from the dysts Python package\n\nclass DoubleGyre(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, alpha, eps, omega):\n        a = eps * np.sin(z)\n        b = 1 - 2 * eps * np.sin(z)\n        f = a * x ** 2 + b * x\n        dx = -alpha * np.pi * np.sin(np.pi * f) * np.cos(np.pi * y)\n        dy = alpha * np.pi * np.cos(np.pi * f) * np.sin(np.pi * y) * (2 * a * x + b)\n        dz = omega\n        return dx, dy, dz\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return x, y, np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.DoublePendulum","page":"Home","title":"ChaoticDynamicalSystemLibrary.DoublePendulum","text":"   DoublePendulum()\n\nTwo coupled rigid pendula without damping.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: true\nKaplan-Yorke dimension: 3.810221473882809\nLyapunov spectrum (estimated): Any[8.464443924343541, 0.46411672696182493, -0.17345525567611142, -10.805817517613212]\nMaximum Lyapunov exponent (estimated): 3.985298067514186\nMultiscale Entropy: 0.5591104791210428\nNon-autonomous: false\nPeriod: 4.0234\nPesin entropy: 8.928560651305366\n\nReferences\n\nSee, for example: Marion (2013). Classical dynamics of particles and systems.\n\nOriginal code from the dysts Python package\n\nclass DoublePendulum(DynSys):\n    @staticjit\n    def _rhs(th1, th2, p1, p2, t, d, m):\n        g = 9.82\n        pre = 6 / (m * d ** 2)\n        denom = 16 - 9 * np.cos(th1 - th2) ** 2\n        th1_dot = pre * (2 * p1 - 3 * np.cos(th1 - th2) * p2) / denom\n        th2_dot = pre * (8 * p2 - 3 * np.cos(th1 - th2) * p1) / denom\n        p1_dot = (\n            -0.5\n            * (m * d ** 2)\n            * (th1_dot * th2_dot * np.sin(th1 - th2) + 3 * (g / d) * np.sin(th1))\n        )\n        p2_dot = (\n            -0.5\n            * (m * d ** 2)\n            * (-th1_dot * th2_dot * np.sin(th1 - th2) + 3 * (g / d) * np.sin(th2))\n        )\n        return th1_dot, th2_dot, p1_dot, p2_dot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Duffing","page":"Home","title":"ChaoticDynamicalSystemLibrary.Duffing","text":"   Duffing()\n\nA monochromatically-forced rigid pendulum, with the nonlinearity approximated as cubic.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.561219319140712\nLyapunov spectrum (estimated): Any[0.09952054532941002, 0.0003077550037828977, -0.17595301607629793]\nMaximum Lyapunov exponent (estimated): 0.14026545752865122\nMultiscale Entropy: 0.8686568999981737\nNon-autonomous: true\nPeriod: 7.4496\nPesin entropy: 0.10008657388524086\n\nReferences\n\nDuffing, G. (1918), Forced oscillations with variable natural frequency and their technical relevance, Heft 41/42, Braunschweig: Vieweg.\n\nOriginal code from the dysts Python package\n\nclass Duffing(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, alpha, beta, delta, gamma, omega):\n        xdot = y\n        ydot = -delta * y - beta * x - alpha * x ** 3 + gamma * np.cos(z)\n        zdot = omega\n        return xdot, ydot, zdot\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return x, y, np.cos(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ExcitableCell","page":"Home","title":"ChaoticDynamicalSystemLibrary.ExcitableCell","text":"   ExcitableCell()\n\nA reduced-order variant of the Hodgkin-Huxley model. The parameter gkc controls the onset of chaos.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1287842177704674\nLyapunov spectrum (estimated): Any[17.030315084501463, -0.3267053778962445, -129.70230355691595]\nMaximum Lyapunov exponent (estimated): 0.7164303367057223\nMultiscale Entropy: 0.7807524009298388\nNon-autonomous: false\nPeriod: 0.5528\nPesin entropy: 17.030315084501463\n\nReferences\n\nTeresa Chay. Chaos In A Three-variable Model Of An Excitable Cell. Physica D 1985\n\nOriginal code from the dysts Python package\n\nclass ExcitableCell(DynSys):\n    def rhs(self, X, t):\n        v, n, c = X\n\n        alpham = 0.1 * (25 + v) / (1 - np.exp(-0.1 * v - 2.5))\n        betam = 4 * np.exp(-(v + 50) / 18)\n        minf = alpham / (alpham + betam)\n\n        alphah = 0.07 * np.exp(-0.05 * v - 2.5)\n        betah = 1 / (1 + np.exp(-0.1 * v - 2))\n        hinf = alphah / (alphah + betah)\n\n        alphan = 0.01 * (20 + v) / (1 - np.exp(-0.1 * v - 2))\n        betan = 0.125 * np.exp(-(v + 30) / 80)\n        ninf = alphan / (alphan + betan)\n        tau = 1 / (230 * (alphan + betan))\n\n        ca = c / (1 + c)\n\n        vdot = (\n            self.gi * minf ** 3 * hinf * (self.vi - v)\n            + self.gkv * n ** 4 * (self.vk - v)\n            + self.gkc * ca * (self.vk - v)\n            + self.gl * (self.vl - v)\n        )\n        ndot = (ninf - n) / tau\n        cdot = self.rho * (minf ** 3 * hinf * (self.vc - v) - self.kc * c)\n        return vdot, ndot, cdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Finance","page":"Home","title":"ChaoticDynamicalSystemLibrary.Finance","text":"   Finance()\n\nStock fluctuations under varying investment demand and interest rates\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.172040321306389\nLyapunov spectrum (estimated): Any[0.10708598383274774, 0.0009835797228343356, -0.6279525877233353]\nMaximum Lyapunov exponent (estimated): 0.09354106442670211\nMultiscale Entropy: 0.7817861077722251\nNon-autonomous: false\nPeriod: 9.8932\nPesin entropy: 0.1084488028544319\n\nReferences\n\nGuoliang Cai, Juanjuan Huang. International Journal of Nonlinear Science, Vol. 3 (2007)\n\nOriginal code from the dysts Python package\n\nclass Finance(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = (1 / b - a) * x + z + x * y\n        ydot = -b * y - x ** 2\n        zdot = -x - c * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.FluidTrampoline","page":"Home","title":"ChaoticDynamicalSystemLibrary.FluidTrampoline","text":"   FluidTrampoline()\n\nA droplet bouncing on a horizontal soap film.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.8462636972682116\nLyapunov spectrum (estimated): Any[0.08081301489037329, -0.0011783910877478326, -0.09403052188090477]\nMaximum Lyapunov exponent (estimated): 0.22311237411461174\nMultiscale Entropy: 0.796312585554829\nNon-autonomous: true\nPeriod: 7.7351\nPesin entropy: 0.08094585172323163\n\nReferences\n\nGilet, Bush. The fluid trampoline: droplets bouncing on a soap film. JFM 2009.\n\nOriginal code from the dysts Python package\n\nclass FluidTrampoline(DynSys):\n    @staticmethod\n    def _rhs(x, y, th, t, gamma, psi, w):\n        xdot = y\n        ydot = -1 - np.heaviside(-x, 0) * (x + psi * y * np.abs(y)) + gamma * np.cos(th)\n        thdot = w\n        return (xdot, ydot, thdot)\n\n    @staticjit\n    def _postprocessing(x, y, th):\n        return x, y, np.cos(th)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ForcedBrusselator","page":"Home","title":"ChaoticDynamicalSystemLibrary.ForcedBrusselator","text":"   ForcedBrusselator()\n\nAn autocatalytic chemical system.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 1.190019824057157\nLyapunov spectrum (estimated): Any[0.0028307087627546254, -0.014898681909916936, -0.23304448314240073]\nMaximum Lyapunov exponent (estimated): 0.015326007974604663\nMultiscale Entropy: 0.47299463051887286\nNon-autonomous: true\nPeriod: 20.411\nPesin entropy: 0.0028307087627546254\n\nReferences\n\nI. Prigogine, From Being to Becoming: Time and Complexity in the Physical Sciences, New York: W.H. Freeman and Company, 1980.\n\nOriginal code from the dysts Python package\n\nclass ForcedBrusselator(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, f, w):\n        xdot = a + x ** 2 * y - (b + 1) * x + f * np.cos(z)\n        ydot = b * x - x ** 2 * y\n        zdot = w\n        return xdot, ydot, zdot\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return x, y, np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ForcedFitzHughNagumo","page":"Home","title":"ChaoticDynamicalSystemLibrary.ForcedFitzHughNagumo","text":"   ForcedFitzHughNagumo()\n\nA driven neuron model sustaining both quiesent and oscillating states.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 1.5705852319395741\nLyapunov spectrum (estimated): Any[0.0006271045837994497, -0.0017541532237019502, -0.9544351506941636]\nMaximum Lyapunov exponent (estimated): 0.007561278655908403\nMultiscale Entropy: 0.946734422406113\nNon-autonomous: true\nPeriod: 42.12235294117647\nPesin entropy: 0.000828176101772673\n\nReferences\n\nFitzHugh, Richard (1961). Impulses and Physiological States in Theoretical Models of Nerve Membrane. Biophysical Journal. 1 (6).\n\nOriginal code from the dysts Python package\n\nclass ForcedFitzHughNagumo(DynSys):\n    @staticjit\n    def _rhs(v, w, z, t, a, b, curr, f, gamma, omega):\n        vdot = v - v ** 3 / 3 - w + curr + f * np.sin(z)\n        wdot = gamma * (v + a - b * w)\n        zdot = omega\n        return vdot, wdot, zdot\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return x, y, np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ForcedVanDerPol","page":"Home","title":"ChaoticDynamicalSystemLibrary.ForcedVanDerPol","text":"   ForcedVanDerPol()\n\nAn electronic circuit containing a triode.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.012828649055009\nLyapunov spectrum (estimated): Any[0.2651824388815116, -0.0008450617218488057, -20.60632249066986]\nMaximum Lyapunov exponent (estimated): 0.0035097622587646343\nMultiscale Entropy: 0.39443058905146283\nNon-autonomous: true\nPeriod: 14.476875\nPesin entropy: 0.26518243888151155\n\nReferences\n\nB. van der Pol (1920). A theory of the amplitude of free and forced triode vibrations. Radio Review 1.\n\nOriginal code from the dysts Python package\n\nclass ForcedVanDerPol(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, mu, w):\n        ydot = mu * (1 - x ** 2) * y - x + a * np.sin(z)\n        xdot = y\n        zdot = w\n        return xdot, ydot, zdot\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return x, y, np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.GenesioTesi","page":"Home","title":"ChaoticDynamicalSystemLibrary.GenesioTesi","text":"   GenesioTesi()\n\nA nonlinear control system with feedback.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1892507433089325\nLyapunov spectrum (estimated): Any[0.09974381765927798, 0.00038146676582121423, -0.5282231255530121]\nMaximum Lyapunov exponent (estimated): 0.10509061137519304\nMultiscale Entropy: 0.7003576241153363\nNon-autonomous: false\nPeriod: 5.9431\nPesin entropy: 0.10027488648885732\n\nReferences\n\nGenesio, Tesi (1992). Harmonic balance methods for the analysis of chaotic dynamics in nonlinear systems. Automatica 28.3 (1992): 531-548.\n\nOriginal code from the dysts Python package\n\nclass GenesioTesi(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = y\n        ydot = z\n        zdot = -c * x - b * y - a * z + x ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.GuckenheimerHolmes","page":"Home","title":"ChaoticDynamicalSystemLibrary.GuckenheimerHolmes","text":"   GuckenheimerHolmes()\n\nA nonlinear oscillator.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.3663164666051353\nLyapunov spectrum (estimated): Any[0.34082003567895874, -0.0032191807339425173, -0.9216135618098852]\nMaximum Lyapunov exponent (estimated): 0.7885729042404602\nMultiscale Entropy: 0.5385101182847213\nNon-autonomous: false\nPeriod: 0.3076923076923077\nPesin entropy: 0.3408200356941137\n\nReferences\n\nGuckenheimer, John, and Philip Holmes (1983).  Nonlinear oscillations, dynamical systems, and bifurcations of vector fields. Vol. 42. Springer Science & Business Media.\n\nOriginal code from the dysts Python package\n\nclass GuckenheimerHolmes(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d, e, f):\n        xdot = a * x - b * y + c * z * x + d * z * x ** 2 + d * z * y ** 2\n        ydot = a * y + b * x + c * z * y\n        zdot = e - z ** 2 - f * x ** 2 - f * y ** 2 - a * z ** 3\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Hadley","page":"Home","title":"ChaoticDynamicalSystemLibrary.Hadley","text":"   Hadley()\n\nAn atmospheric convective cell.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.7273838319442127\nLyapunov spectrum (estimated): Any[0.31166133927315953, -0.0010838827053467116, -0.42739317979015523]\nMaximum Lyapunov exponent (estimated): 0.2386587703845738\nMultiscale Entropy: 0.9351389987191853\nNon-autonomous: false\nPeriod: 1.4541\nPesin entropy: 0.3144504334934165\n\nReferences\n\nG. Hadley (1735). On the cause of the general trade winds. Philosophical Transactions of the Royal Society, vol. 34, pp. 58â€“62.\n\nOriginal code from the dysts Python package\n\nclass Hadley(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, f, g):\n        xdot = -y ** 2 - z ** 2 - a * x + a * f\n        ydot = x * y - b * x * z - y + g\n        zdot = b * x * y + x * z - z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Halvorsen","page":"Home","title":"ChaoticDynamicalSystemLibrary.Halvorsen","text":"   Halvorsen()\n\nAn algebraically-simple chaotic system with quadratic nonlinearity\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.118235268907861\nLyapunov spectrum (estimated): Any[0.586197150399321, -0.031953945256851884, -4.6876300977027565]\nMaximum Lyapunov exponent (estimated): 0.6963711539102683\nMultiscale Entropy: 0.7527831765757674\nNon-autonomous: false\nPeriod: 1.4889\nPesin entropy: 0.586197150399321\n\nReferences\n\nSprott, Julien C (2010). Elegant chaos: algebraically simple chaotic flows. World Scientific, 2010.\n\nOriginal code from the dysts Python package\n\nclass Halvorsen(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = -a * x - b * y - b * z - y ** 2\n        ydot = -a * y - b * z - b * x - z ** 2\n        zdot = -a * z - b * x - b * y - x ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HastingsPowell","page":"Home","title":"ChaoticDynamicalSystemLibrary.HastingsPowell","text":"   HastingsPowell()\n\nA three species food web.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.027757892627057\nLyapunov spectrum (estimated): Any[0.008585012825774563, 0.005765040490702786, -0.5169232002224432]\nMaximum Lyapunov exponent (estimated): 0.012532796124563227\nMultiscale Entropy: 0.47829796264231095\nNon-autonomous: false\nPeriod: 135.19\nPesin entropy: 0.014350053316477346\n\nReferences\n\nHastings, Powell. Ecology 1991\n\nOriginal code from the dysts Python package\n\nclass HastingsPowell(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a1, a2, b1, b2, d1, d2):\n        xdot = x * (1 - x) - y * a1 * x / (1 + b1 * x)\n        ydot = y * a1 * x / (1 + b1 * x) - z * a2 * y / (1 + b2 * y) - d1 * y\n        zdot = z * a2 * y / (1 + b2 * y) - d2 * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HenonHeiles","page":"Home","title":"ChaoticDynamicalSystemLibrary.HenonHeiles","text":"   HenonHeiles()\n\nA star's motion around the galactic center.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 6.81141589838772\nLyapunov spectrum (estimated): Any[0.026747154244887203, 0.011500891097175434, -1.4057113933414076e-5, -0.011151041415888588]\nMaximum Lyapunov exponent (estimated): 0.03551120315239528\nMultiscale Entropy: 0.7137794258156454\nNon-autonomous: false\nPeriod: 6.37\nPesin entropy: 0.03870865064107525\n\nReferences\n\nHenon, M.; Heiles, C. (1964). The applicability of the third integral of motion: Some numerical experiments. The Astronomical Journal. 69: 73.\n\nOriginal code from the dysts Python package\n\nclass HenonHeiles(DynSys):\n    @staticjit\n    def _rhs(x, y, px, py, t, lam):\n        xdot = px\n        ydot = py\n        pxdot = -x - 2 * lam * x * y\n        pydot = -y - lam * x ** 2 + lam * y ** 2\n        return xdot, ydot, pxdot, pydot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HindmarshRose","page":"Home","title":"ChaoticDynamicalSystemLibrary.HindmarshRose","text":"   HindmarshRose()\n\nA neuron model exhibiting spiking and bursting.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0405369895957373\nLyapunov spectrum (estimated): Any[0.2621464274609406, 0.0017705383465481184, -6.510663065519547]\nMaximum Lyapunov exponent (estimated): 0.6535393283242747\nMultiscale Entropy: 0.8692605688019491\nNon-autonomous: false\nPeriod: 1.752\nPesin entropy: 0.2639169709155772\n\nReferences\n\nMarhl, Perc. Chaos, Solitons, Fractals 2005.\n\nOriginal code from the dysts Python package\n\nclass HindmarshRose(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d, s, tx, tz):\n        xdot = -x + 1 / tx * y - a / tx * x ** 3 + b / tx * x ** 2 + 1 / tx * z\n        ydot = -a * x ** 3 - (d - b) * x ** 2 + z\n        zdot = -s / tz * x - 1 / tz * z + c / tz\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Hopfield","page":"Home","title":"ChaoticDynamicalSystemLibrary.Hopfield","text":"   Hopfield()\n\nA neural network with frustrated connectivity\n\nStats\n\nEmbedding dimension: 6\nHamiltonian: false\nKaplan-Yorke dimension: 2.264479110541058\nLyapunov spectrum (estimated): Any[0.07726437124258394, -0.00018152933777384922, -0.29083324580448194, -0.36906925337474944, -0.40604718386075256, -1.4425404449511432]\nMaximum Lyapunov exponent (estimated): 0.5684266951234997\nMultiscale Entropy: 0.9160145554679957\nNon-autonomous: false\nPeriod: 10.865\nPesin entropy: 0.07748903749076723\n\nReferences\n\nLewis & Glass, Neur Comp (1992)\n\nOriginal code from the dysts Python package\n\nclass Hopfield(DynSys):\n    def f(self, x):\n        return (1 + np.tanh(x)) / 2\n\n    def rhs(self, X, t):\n        Xdot = -X / self.tau + self.f(self.eps * np.matmul(self.k, X)) - self.beta\n        return Xdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperBao","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperBao","text":"   HyperBao()\n\nHyperchaos in the Lu system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.0460429607933572\nLyapunov spectrum (estimated): Any[0.6959739496471207, 0.2076688444499756, 0.01646766869238271, -19.983737503321315]\nMaximum Lyapunov exponent (estimated): 0.7941925747845208\nMultiscale Entropy: 0.8910215561062699\nNon-autonomous: false\nPeriod: 0.5831505997603473\nPesin entropy: 0.9201105075982862\n\nReferences\n\nBao, Liu  (2008). A hyperchaotic attractor coined from the chaotic Lu system. Chin. Physics Letters, Vol. 25, pp 2396-2399.\n\nOriginal code from the dysts Python package\n\nclass HyperBao(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d, e):\n        xdot = a * y - a * x + w\n        ydot = c * y - x * z\n        zdot = x * y - b * z\n        wdot = e * x + d * y * z\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperCai","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperCai","text":"   HyperCai()\n\nA hyperchaotic variant of the Finance system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.138030987910704\nLyapunov spectrum (estimated): Any[1.634443623908957, 0.12845528254618424, -0.003328688360603957, -12.747646341795276]\nMaximum Lyapunov exponent (estimated): 1.6777584899044127\nMultiscale Entropy: 1.1155413734604414\nNon-autonomous: false\nPeriod: 0.6113936187028436\nPesin entropy: 1.7628989064551457\n\nReferences\n\nGuoliang, Huang (2007). A New Finance Chaotic Attractor. International Journal of Nonlinear Science.\n\nOriginal code from the dysts Python package\n\nclass HyperCai(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d, e):\n        xdot = a * y - a * x\n        ydot = b * x + c * y - x * z + w\n        zdot = -d * z + y ** 2\n        wdot = -e * x\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperJha","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperJha","text":"   HyperJha()\n\nA hyperchaotic system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.053181782412727\nLyapunov spectrum (estimated): Any[0.3949499860671474, 0.2920214751184925, 0.005568431034995312, -13.022125042186726]\nMaximum Lyapunov exponent (estimated): 0.38695361636760767\nMultiscale Entropy: 0.8934166449122942\nNon-autonomous: false\nPeriod: 0.8564467295817622\nPesin entropy: 0.6925398922206352\n\nReferences\n\nJÃ¼rgen Meier (2003). Presentation of Attractors with Cinema.\n\nOriginal code from the dysts Python package\n\nclass HyperJha(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d):\n        xdot = a * y - a * x + w\n        ydot = -x * z + b * x - y\n        zdot = x * y - c * z\n        wdot = -x * z + d * w\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperLorenz","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperLorenz","text":"   HyperLorenz()\n\nA hyperchaotic variant of the Lorenz attractor.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.044709906668086\nLyapunov spectrum (estimated): Any[0.2925643599949083, 0.24691553258701357, 0.04704434899468292, -13.118440302968889]\nMaximum Lyapunov exponent (estimated): 0.3288809596909799\nMultiscale Entropy: 0.8026458791332332\nNon-autonomous: false\nPeriod: 1.277546730110058\nPesin entropy: 0.5865242415766048\n\nReferences\n\nJÃ¼rgen Meier (2003). Presentation of Attractors with Cinema.\n\nOriginal code from the dysts Python package\n\nclass HyperLorenz(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d):\n        xdot = a * y - a * x + w\n        ydot = -x * z + c * x - y\n        zdot = -b * z + x * y\n        wdot = d * w - x * z\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperLu","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperLu","text":"   HyperLu()\n\nA hyperchaotic variant of the Lu attractor.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.0822889656900583\nLyapunov spectrum (estimated): Any[1.0855770127041702, 0.4753850931706396, 0.02849951886859947, -19.313823203887658]\nMaximum Lyapunov exponent (estimated): 1.042961263138283\nMultiscale Entropy: 1.0455788608813867\nNon-autonomous: false\nPeriod: 0.7162856981996777\nPesin entropy: 1.5894616248138722\n\nReferences\n\nChen, A., Lu, J., LÃ¼, J., & Yu, S. (2006). Generating hyperchaotic LÃ¼ attractor via state feedback control. Physica A: Statistical Mechanics and its Applications, 364, 103-110.\n\nOriginal code from the dysts Python package\n\nclass HyperLu(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a=36, b=3, c=20, d=1.3):\n        xdot = a * y - a * x + w\n        ydot = -x * z + c * y\n        zdot = x * y - b * z\n        wdot = d * w + x * z\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperPang","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperPang","text":"   HyperPang()\n\nA hyperchaotic system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.08902125132107\nLyapunov spectrum (estimated): Any[1.586932998381499, 0.28444192185263556, -0.0011541322141891326, -21.007696151519628]\nMaximum Lyapunov exponent (estimated): 1.4465315511406867\nMultiscale Entropy: 0.9172158388570456\nNon-autonomous: false\nPeriod: 0.8439374360017028\nPesin entropy: 1.871913394885623\n\nReferences\n\nPang, S., & Liu, Y. (2011). A new hyperchaotic system from the LÃ¼ system and its control. Journal of Computational and Applied Mathematics, 235(8), 2775-2789.\n\nOriginal code from the dysts Python package\n\nclass HyperPang(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a=36, b=3, c=20, d=2):\n        xdot = a * y - a * x\n        ydot = -x * z + c * y + w\n        zdot = x * y - b * z\n        wdot = -d * x - d * y\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperQi","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperQi","text":"   HyperQi()\n\nA hyperchaotic variant of the Qi system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.2816770286126777\nLyapunov spectrum (estimated): Any[13.908799876284396, 2.8519979827853357, -0.04957904444451209, -59.32758839771818]\nMaximum Lyapunov exponent (estimated): 12.787249321134263\nMultiscale Entropy: 0.9988440965886223\nNon-autonomous: false\nPeriod: 0.06186038560173437\nPesin entropy: 16.760797859069733\n\nReferences\n\nG. Qi, M. A. van Wyk, B. J. van Wyk, and G. Chen, (2008). On a new hyperchaotic system. Physics Letters A.\n\nOriginal code from the dysts Python package\n\nclass HyperQi(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d, e, f):\n        xdot = a * y - a * x + y * z\n        ydot = b * x + b * y - x * z\n        zdot = -c * z - e * w + x * y\n        wdot = -d * w + f * z + x * y\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperRossler","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperRossler","text":"   HyperRossler()\n\nA hyperchaotic variant of the Rossler system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 2.916384112225743\nLyapunov spectrum (estimated): Any[0.27859233648384435, -7.749198930652314e-5, -0.3014660985555502, -70.26609894565237]\nMaximum Lyapunov exponent (estimated): 0.1718849632568779\nMultiscale Entropy: 0.9144754695112332\nNon-autonomous: false\nPeriod: 1.1157476694793766\nPesin entropy: 0.2789695684743801\n\nReferences\n\nRossler, O. E. (1979). An equation for hyperchaos.\n\nOriginal code from the dysts Python package\n\nclass HyperRossler(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d):\n        xdot = -y - z\n        ydot = x + a * y + w\n        zdot = b + x * z\n        wdot = -c * z + d * w\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperWang","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperWang","text":"   HyperWang()\n\nA hyperchaotic variant of the Wang system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.105321722354005\nLyapunov spectrum (estimated): Any[1.2224015619377895, 0.25827623672371736, -0.0075512136517132625, -13.986919236227278]\nMaximum Lyapunov exponent (estimated): 1.2930140887300063\nMultiscale Entropy: 0.9969261837212393\nNon-autonomous: false\nPeriod: 0.6481520567576332\nPesin entropy: 1.480677798661507\n\nReferences\n\nWang, Z., Sun, Y., van Wyk, B. J., Qi, G. & van Wyk, M. A (2009). A 3-D four-wing attractor and its analysis. Brazilian J. Phys. 39.\n\nOriginal code from the dysts Python package\n\nclass HyperWang(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a=10, b=40, c=2.5, d=10.6, e=4):\n        xdot = a * y - a * x\n        ydot = -x * z + b * x + w\n        zdot = -c * z + e * x ** 2\n        wdot = -d * x\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperXu","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperXu","text":"   HyperXu()\n\nA hyperchaotic system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.0909471864561056\nLyapunov spectrum (estimated): Any[1.0420068843753962, 0.20717763316365526, -0.0033988115975040426, -13.697896294059921]\nMaximum Lyapunov exponent (estimated): 0.9819830018599975\nMultiscale Entropy: 0.9312323303231519\nNon-autonomous: false\nPeriod: 1.1328151255687646\nPesin entropy: 1.2491913312241498\n\nReferences\n\nLetellier & Rossler (2007). Hyperchaos. Scholarpedia 2.8 (2007): 1936.\n\nOriginal code from the dysts Python package\n\nclass HyperXu(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a=10, b=40, c=2.5, d=2, e=16):\n        xdot = a * y - a * x + w\n        ydot = b * x + e * x * z\n        zdot = -c * z - x * y\n        wdot = x * z - d * y\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperYan","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperYan","text":"   HyperYan()\n\nA hyperchaotic system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 2.0711118082329567\nLyapunov spectrum (estimated): Any[0.9120352761173002, 0.15303345953001665, -14.977382134147613, -39.36365990052555]\nMaximum Lyapunov exponent (estimated): 1.3945968455812914\nMultiscale Entropy: 0.8166157518949907\nNon-autonomous: false\nPeriod: 0.9127028626966961\nPesin entropy: 1.0650687356473167\n\nReferences\n\nJÃ¼rgen Meier (2003). Presentation of Attractors with Cinema.\n\nOriginal code from the dysts Python package\n\nclass HyperYan(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a=37, b=3, c=26, d=38):\n        xdot = a * y - a * x\n        ydot = (c - a) * x - x * z + c * y\n        zdot = -b * z + x * y - y * z + x * z - w\n        wdot = -d * w + y * z - x * z\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.HyperYangChen","page":"Home","title":"ChaoticDynamicalSystemLibrary.HyperYangChen","text":"   HyperYangChen()\n\nA hyperchaotic system.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.026605264361547\nLyapunov spectrum (estimated): Any[0.5742688696462735, 0.327365255173604, 0.023510192276255986, -34.77284163099938]\nMaximum Lyapunov exponent (estimated): 0.42042732521941667\nMultiscale Entropy: 0.9730322217427024\nNon-autonomous: false\nPeriod: 0.9127028626966961\nPesin entropy: 0.9255171125652686\n\nReferences\n\nJÃ¼rgen Meier (2003). Presentation of Attractors with Cinema.\n\nOriginal code from the dysts Python package\n\nclass HyperYangChen(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a=30, b=3, c=35, d=8):\n        xdot = a * y - a * x\n        ydot = c * x - x * z + w\n        zdot = -b * z + x * y\n        wdot = -d * x\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.IkedaDelay","page":"Home","title":"ChaoticDynamicalSystemLibrary.IkedaDelay","text":"   IkedaDelay()\n\nA passive optical resonator system. A standard delay dimension of three is used.\n\nStats\n\nEmbedding dimension: 10\nHamiltonian: false\nKaplan-Yorke dimension: 8.284295212220359\nLyapunov spectrum (estimated): Any[0.7139744431963619, 0.03258370277261943, -0.06766062243103049, -0.07744565521894307, -0.09054735418410836, -0.10900317234818346, -0.13696057562417352, -0.18439894250590672, -0.2833034824174493, -0.6392438255039592]\nMaximum Lyapunov exponent (estimated): 0.448298365567425\nNon-autonomous: false\nPeriod: 1.486528\nPesin entropy: 0.7465581459689814\n\nReferences\n\nK. Ikeda and K. Matsumoto (1987). High-dimensional chaotic behavior in systems with time-delayed feedback, Physica D, 29 (1-2), 223-235\n\nOriginal code from the dysts Python package\n\nclass IkedaDelay(DynSysDelay):\n    @staticjit\n    def _rhs(x, xt, t, c, mu, tau, x0):\n        xdot = mu * np.sin(xt - x0) - c * x\n        return xdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.IsothermalChemical","page":"Home","title":"ChaoticDynamicalSystemLibrary.IsothermalChemical","text":"   IsothermalChemical()\n\nAn isothermal chemical system with mixed-mode oscillations\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0385823810364654\nLyapunov spectrum (estimated): Any[0.3365871343421436, -0.05136527222093221, -7.392541736904205]\nMaximum Lyapunov exponent (estimated): 0.450090505359164\nMultiscale Entropy: 0.6589422003608746\nNon-autonomous: false\nPeriod: 0.7302799999999999\nPesin entropy: 0.3365871343421436\n\nReferences\n\nPetrov, Scott, Showalter. Mixed-mode oscillations in chemical systems. J Chem Phys 1992\n\nOriginal code from the dysts Python package\n\nclass IsothermalChemical(DynSys):\n    @staticmethod\n    def _rhs(alpha, beta, gamma, t, delta, kappa, mu, sigma):\n        alphadot = mu * (kappa + gamma) - alpha * beta ** 2 - alpha\n        betadot = (alpha * beta ** 2 + alpha - beta) / sigma\n        gammadot = (beta - gamma) / delta\n        return alphadot, betadot, gammadot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ItikBanksTumor","page":"Home","title":"ChaoticDynamicalSystemLibrary.ItikBanksTumor","text":"   ItikBanksTumor()\n\nA model of cancer cell populations.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0152772613355485\nLyapunov spectrum (estimated): Any[0.022156938955395417, -0.0135394920593605, -0.5610833889492404]\nMaximum Lyapunov exponent (estimated): 0.03621509684991421\nMultiscale Entropy: 0.5883298730506914\nNon-autonomous: false\nPeriod: 49.74\nPesin entropy: 0.022156938955395417\n\nReferences\n\nItik, Banks. Int J Bifurcat Chaos 2010\n\nOriginal code from the dysts Python package\n\nclass ItikBanksTumor(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a12, a13, a21, a31, d3, k3, r2, r3):\n        xdot = x * (1 - x) - a12 * x * y - a13 * x * z\n        ydot = r2 * y * (1 - y) - a21 * x * y\n        zdot = r3 * x * z / (x + k3) - a31 * x * z - d3 * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.JerkCircuit","page":"Home","title":"ChaoticDynamicalSystemLibrary.JerkCircuit","text":"   JerkCircuit()\n\nAn electronic circuit with nonlinearity provided by a diode.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.5082428902531144\nLyapunov spectrum (estimated): Any[0.394872929553187, 0.1849026306096344, -1.1407351759248092]\nMaximum Lyapunov exponent (estimated): 0.2922722771543928\nMultiscale Entropy: 0.38139916676685187\nNon-autonomous: false\nPeriod: 19.4546\nPesin entropy: 0.5797755601628214\n\nReferences\n\nSprott (2011). A new chaotic jerk circuit. IEEE Circ. Sys. 2011.\n\nOriginal code from the dysts Python package\n\nclass JerkCircuit(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, eps, y0):\n        xdot = y\n        ydot = z\n        zdot = -z - x - eps * (np.exp(y / y0) - 1)\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.KawczynskiStrizhak","page":"Home","title":"ChaoticDynamicalSystemLibrary.KawczynskiStrizhak","text":"   KawczynskiStrizhak()\n\nA chemical oscillator model describing mixed-modes in the BZ equations.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 1.4235221965773541\nLyapunov spectrum (estimated): Any[0.025607519929323416, -0.06145426210744069, -0.31683393262481707]\nMaximum Lyapunov exponent (estimated): 0.0757060839542753\nMultiscale Entropy: 0.5935098791328474\nNon-autonomous: false\nPeriod: 7.991666666666667\nPesin entropy: 0.02560751992932341\n\nReferences\n\nP. E. Strizhak and A. L. Kawczynski, J. Phys. Chem. 99, 10830 (1995).\n\nOriginal code from the dysts Python package\n\nclass KawczynskiStrizhak(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, beta, gamma, kappa, mu):\n        xdot = gamma * y - gamma * x ** 3 + 3 * mu * gamma * x\n        ydot = -2 * mu * x - y - z + beta\n        zdot = kappa * x - kappa * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Laser","page":"Home","title":"ChaoticDynamicalSystemLibrary.Laser","text":"   Laser()\n\nA semiconductor laser model\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.049321615812801\nLyapunov spectrum (estimated): Any[0.7637435195473311, 0.020943250302999646, -15.909545615344538]\nMaximum Lyapunov exponent (estimated): 0.6080602180196161\nMultiscale Entropy: 1.004437967414151\nNon-autonomous: false\nPeriod: 0.94667\nPesin entropy: 0.7848314215142518\n\nReferences\n\nAbooee, Yaghini-Bonabi, Jahed-Motlagh (2013). Analysis and circuitry realization of a novel three-dimensional chaotic system. Comm Nonline Sci 2013\n\nOriginal code from the dysts Python package\n\nclass Laser(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d, h, k):\n        xdot = a * y - a * x + b * y * z ** 2\n        ydot = c * x + d * x * z ** 2\n        zdot = h * z + k * x ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.LidDrivenCavityFlow","page":"Home","title":"ChaoticDynamicalSystemLibrary.LidDrivenCavityFlow","text":"   LidDrivenCavityFlow()\n\nA two-dimensional flow alternately driven by translation of the left and right walls.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: true\nKaplan-Yorke dimension: 2.9856669109882814\nLyapunov spectrum (estimated): Any[1.00757312, -0.00276829, -1.01941623]\nMaximum Lyapunov exponent (estimated): 2.172601412109087\nMultiscale Entropy: 0.7815824521381879\nNon-autonomous: true\nPeriod: 2.7333134945588955\nPesin entropy: 1.007573134065856\n\nReferences\n\nGrover et al. Chaos (2012). Topological chaos, braiding and bifurcation of almost-cyclic sets.\n\nOriginal code from the dysts Python package\n\nclass LidDrivenCavityFlow(DynSys):\n    @staticjit\n    def _lid(x, y, a, b, tau, u1, u2):\n        \"\"\"The velocity field when the left domain drives\"\"\"\n        prefactor1 = 2 * u1 * np.sin(np.pi * x / a) / (2 * b * np.pi + a * np.sinh(2 * np.pi * b / a))\n        prefactor2 = 2 * u2 * np.sin(2 * np.pi * x / a) / (4 * b * np.pi + a * np.sinh(4 * np.pi * b / a))\n        vx1 = -b * np.pi * np.sinh(np.pi * b / a) * np.sinh(np.pi * y / a) + np.cosh(np.pi * b / a) * (np.pi * y * np.cosh(np.pi * y /a) + a * np.sinh(np.pi * y / a))\n        vx2 = -2 * b * np.pi * np.sinh(2 * np.pi * b / a) * np.sinh(2 * np.pi * y / a) + np.cosh(2 * np.pi * b / a) * (2 * np.pi * y * np.cosh(2 * np.pi * y / a) + a * np.sinh(2 * np.pi * y / a))\n        vx = prefactor1 * vx1 + prefactor2 * vx2\n\n        prefactor1 = 2 * np.pi * u1 * np.cos(np.pi * x / a) / (2 * b * np.pi + a * np.sinh(2 * np.pi * b / a))\n        prefactor2 = 4 * np.pi * u2 * np.cos(2 * np.pi * x / a) / (4 * b * np.pi + a * np.sinh(4 * np.pi * b / a))\n        vy1 = b * np.sinh(np.pi * b / a) * np.cosh(np.pi * y / a) - np.cosh(np.pi * b / a) * y * np.sinh(np.pi * y / a)\n        vy2 = b * np.sinh(2 * np.pi * b / a) * np.cosh(2 * np.pi * y / a) - np.cosh(2 * np.pi * b / a) * y * np.sinh(2 * np.pi * y / a)\n        vy = prefactor1 * vy1 + prefactor2 * vy2\n\n        # vy1 = b * np.sinh(np.pi * b / a) * np.cosh(np.pi * y / a) - np.cosh(np.pi * b / a) * y * np.sinh(np.pi * y / a)\n        # vy2 = b * np.sinh(2 * np.pi * b / a) * np.cosh(2 * np.pi * y / a) - np.cosh(2 * np.pi * b / a) * y * np.sinh(2 * np.pi * y / a)\n        # vy = np.pi * prefactor1 * vy1 + 2 * np.pi * prefactor2 * vy2\n\n        return vx, vy\n\n    # @staticjit\n    # def _right(x, y, a, b, tau, u1, u2):\n    #     \"\"\"The velocity field when the right domain drives\"\"\"\n    #     prefactor1 = 2 * u1 * np.sin(np.pi * x / a) / (2 * b * np.pi + a * np.sinh(2 * np.pi * b / a))\n    #     prefactor2 = 2 * u2 * np.sin(2 * np.pi * x / a) / (4 * b * np.pi + a * np.sinh(4 * np.pi * b / a))\n    #     vx1 = -b * np.pi * np.sinh(np.pi * b / a) * np.sinh(np.pi * y / a) - np.cosh(np.pi * b / a) * (np.pi * y * np.cosh(np.pi * y /a) + a * np.sinh(np.pi * y /a))\n    #     vx2 = -4 * b * np.pi * np.sinh(2 * np.pi * b / a) * np.sinh(2 * np.pi * y / a) - np.cosh(2 * np.pi * b / a) * (2 * np.pi * y * np.cosh(2 * np.pi * y /a) + a * np.sinh(2 * np.pi * y /a))\n    #     vx = prefactor1 * vx1 - prefactor2 * vx2\n\n    #     prefactor1 = 2 * np.pi * u1 * np.cos(np.pi * x / a) / (2 * b * np.pi + a * np.sinh(2 * np.pi * b / a))\n    #     prefactor2 = 4 * np.pi * u2 * np.cos(2 * np.pi * x / a) / (4 * b * np.pi + a * np.sinh(4 * np.pi * b / a))\n    #     vy1 = -b * np.sinh(np.pi * b / a) * np.cosh(np.pi * y / a) + np.cosh(np.pi * b / a) * y * np.sinh(np.pi * y / a)\n    #     vy2 = -2 * b * np.sinh(2 * np.pi * b / a) * np.cosh(2 * np.pi * y / a) + np.cosh(2 * np.pi * b / a) * 2 * y * np.sinh(2 * np.pi * y / a)\n    #     vy = prefactor1 * vy1 + prefactor2 * vy2\n\n    #     return vx, vy\n\n    @staticjit\n    def _protocol(t, tau, stiffness=20):\n        return 0.5 + 0.5 * np.tanh(tau * stiffness * np.sin(2 * np.pi * t / tau))\n\n    def rhs(self, X, t):\n        x, y, tt = X\n        weight = self._protocol(tt, self.tau)\n        dx1, dy1 = self._lid(x, y, self.a, self.b, self.tau, self.u1, self.u2)\n        dx2, dy2 = self._lid(x, y, self.a, self.b, self.tau, -self.u1, self.u2)\n        dx = weight * dx1 + (1 - weight) * dx2\n        dy = weight * dy1 + (1 - weight) * dy2\n        dtt = 1\n        return dx, dy, dtt\n\n    def _postprocessing(self, x, y, tt):\n        return x, y, np.sin(2 * np.pi * tt / self.tau)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.LiuChen","page":"Home","title":"ChaoticDynamicalSystemLibrary.LiuChen","text":"   LiuChen()\n\nDerived from Sakarya.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 1.2188137323261288\nLyapunov spectrum (estimated): Any[0.21332142584135133, -0.9748996261500176, -18.807059276226646]\nMaximum Lyapunov exponent (estimated): 0.2457084451352168\nMultiscale Entropy: 0.7641473604711979\nNon-autonomous: false\nPeriod: 8.0164\nPesin entropy: 0.2133214258413513\n\nReferences\n\nLiu, Chen. Int J Bifurcat Chaos. 2004: 1395-1403.\n\nOriginal code from the dysts Python package\n\nclass RayleighBenard(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, r):\n        xdot = a * y - a * x\n        ydot = r * y - x * z\n        zdot = x * y - b * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Lorenz-Tuple{}","page":"Home","title":"ChaoticDynamicalSystemLibrary.Lorenz","text":"   Lorenz()\n\nA minimal weather model based on atmospheric convection.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.075158758095728\nLyapunov spectrum (estimated): Any[1.0910931847726466, 0.02994120961308413, -14.915552395875103]\nMaximum Lyapunov exponent (estimated): 0.8917098035724058\nMultiscale Entropy: 1.1541457906835575\nNon-autonomous: false\nPeriod: 1.5008\nPesin entropy: 1.121034394385731\n\nReferences\n\nLorenz, Edward N (1963). Deterministic nonperiodic flow. Journal of the atmospheric sciences 20.2 (1963): 130-141.\n\nOriginal code from the dysts Python package\n\nclass Lorenz(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, beta, rho, sigma):\n        xdot = sigma * y - sigma * x\n        ydot = rho * x - x * z - y\n        zdot = x * y - beta * z\n        return xdot, ydot, zdot\n    @staticjit\n    def _jac(x, y, z, t, beta, rho, sigma):\n        row1 = [-sigma, sigma, 0]\n        row2 = [rho - z, -1, -x]\n        row3 = [y, x, -beta]\n        return [row1, row2, row3]\n\n\n\n\n\n","category":"method"},{"location":"#ChaoticDynamicalSystemLibrary.Lorenz84","page":"Home","title":"ChaoticDynamicalSystemLibrary.Lorenz84","text":"   Lorenz84()\n\nAtmospheric circulation analogous to Hadley convection.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.4449761695022096\nLyapunov spectrum (estimated): Any[1.0474807193950644, -0.045398035352994866, -2.251992293230755]\nMaximum Lyapunov exponent (estimated): 0.46146683857936616\nMultiscale Entropy: 0.6685802317710752\nNon-autonomous: false\nPeriod: 6.2586\nPesin entropy: 1.0474807193950644\n\nReferences\n\nE. Lorenz (1984). Irregularity: a fundamental property of the atmosphere. Tellus A, vol. 36, no. 2, pp. 98â€“110, 1984.\n\nOriginal code from the dysts Python package\n\nclass Lorenz84(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, f, g):\n        xdot = -a * x - y ** 2 - z ** 2 + a * f\n        ydot = -y + x * y - b * x * z + g\n        zdot = -z + b * x * y + x * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Lorenz96","page":"Home","title":"ChaoticDynamicalSystemLibrary.Lorenz96","text":"   Lorenz96()\n\nA climate model containing fluid-like advective nonlinearities, and multiscale coupling of fast and slow variables.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 3.1698163415908196\nLyapunov spectrum (estimated): Any[1.6247012663091516, 0.17185232259745578, -1.1936282999960617, -3.550455057872212]\nMaximum Lyapunov exponent (estimated): 1.3361667787286362\nMultiscale Entropy: 0.8046726640855828\nNon-autonomous: false\nPeriod: 2.1969\nPesin entropy: 1.7965535889066073\n\nReferences\n\nLorenz, Edward (1996). Predictability: A problem partly solved. Seminar on Predictability, Vol. I, ECMWF.\n\nOriginal code from the dysts Python package\n\nclass Lorenz96(DynSys):\n    def rhs(self, X, t):\n        Xdot = np.zeros_like(X)\n        Xdot[0] = (X[1] - X[-2]) * X[-1] - X[0] + self.f\n        Xdot[1] = (X[2] - X[-1]) * X[0] - X[1] + self.f\n        Xdot[-1] = (X[0] - X[-3]) * X[-2] - X[-1] + self.f\n        Xdot[2:-1] = (X[3:] - X[:-3]) * X[1:-2] - X[2:-1] + self.f\n        return Xdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.LorenzBounded-Tuple{}","page":"Home","title":"ChaoticDynamicalSystemLibrary.LorenzBounded","text":"   LorenzBounded()\n\nThe Lorenz attractor in the presence of a confining potential.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0704391073439155\nLyapunov spectrum (estimated): Any[0.8497533717540197, 0.001413707285345669, -12.120634680260636]\nMaximum Lyapunov exponent (estimated): 0.7124135270827626\nMultiscale Entropy: 1.1983193915488475\nNon-autonomous: false\nPeriod: 1.3716\nPesin entropy: 0.8513198508911037\n\nReferences\n\nSprott & Xiong (2015). Chaos.\n\nOriginal code from the dysts Python package\n\nclass LorenzBounded(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, beta, r, rho, sigma):\n        xdot = sigma * y - sigma * x - sigma/r**2 * y * x ** 2 - sigma/r**2 * y ** 3 - sigma/r**2 * y * z ** 2 + sigma/r**2 * x ** 3 + sigma/r**2 * x * y ** 2 + sigma/r**2 * x * z ** 2\n        ydot = rho * x - x * z - y - rho/r**2 * x ** 3 - rho/r**2 * x * y ** 2 - rho/r**2 * x * z ** 2 + 1/r**2 * z * x ** 3 + 1/r**2 * x * z * y ** 2 + 1/r**2 * x * z ** 3 + 1/r**2 * y * x ** 2 + 1/r**2 * y ** 3 + 1/r**2 * y * z ** 2\n        zdot = x * y - beta * z - 1/r**2 * y * x ** 3 - 1/r**2 * x * y ** 3 - 1/r**2 * x * y * z ** 2 + beta/r**2 * z * x ** 2 + beta/r**2 * z * y ** 2 + beta/r**2 * z ** 3\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"method"},{"location":"#ChaoticDynamicalSystemLibrary.LorenzCoupled-Tuple{}","page":"Home","title":"ChaoticDynamicalSystemLibrary.LorenzCoupled","text":"   LorenzCoupled()\n\nTwo coupled Lorenz attractors.\n\nStats\n\nEmbedding dimension: 6\nHamiltonian: false\nKaplan-Yorke dimension: 3.0408069075490425\nLyapunov spectrum (estimated): Any[1.2218762961515068, 0.1222254715421154, -1.265209618630438, -1.9333037412103384, -13.618111101381306, -15.073328947851422]\nMaximum Lyapunov exponent (estimated): 1.0284398414904556\nMultiscale Entropy: 1.1717493753138832\nNon-autonomous: false\nPeriod: 1.6207\nPesin entropy: 1.3441017676936224\n\nReferences\n\nLorenz, Edward N. Deterministic nonperiodic flow. Journal of the atmospheric sciences 20.2 (1963): 130-141.\n\nOriginal code from the dysts Python package\n\nclass LorenzCoupled(DynSys):\n    @staticjit\n    def _rhs(x1, y1, z1, x2, y2, z2, t, beta, eps, rho, rho1, rho2, sigma):\n        x1dot = sigma * y1 - sigma * x1\n        y1dot = rho1 * x1 - x1 * z1 - y1\n        z1dot = x1 * y1 - beta * z1\n        x2dot = sigma * y2 - sigma * x2 + eps * x1 - eps * x2\n        y2dot = rho2 * x2 - x2 * z2 - y2\n        z2dot = x2 * y2 - beta * z2\n        return x1dot, y1dot, z1dot, x2dot, y2dot, z2dot\n\n\n\n\n\n","category":"method"},{"location":"#ChaoticDynamicalSystemLibrary.LorenzStenflo","page":"Home","title":"ChaoticDynamicalSystemLibrary.LorenzStenflo","text":"   LorenzStenflo()\n\nAtmospheric acoustic-gravity waves.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 2.1738121741011174\nLyapunov spectrum (estimated): Any[0.44944459925783387, 0.026077542739630446, -2.7358399678801906, -3.4213273148340293]\nMaximum Lyapunov exponent (estimated): 0.3807742646421621\nMultiscale Entropy: 1.0299236916146275\nNon-autonomous: false\nPeriod: 3.8877142857142855\nPesin entropy: 0.47552214199746434\n\nReferences\n\nLetellier & Rossler (2007). Hyperchaos. Scholarpedia 2.8 (2007): 1936.\n\nOriginal code from the dysts Python package\n\nclass LorenzStenflo(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d):\n        xdot = a * y - a * x + d * w\n        ydot = c * x - x * z - y\n        zdot = x * y - b * z\n        wdot = -x - a * w\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.LuChen","page":"Home","title":"ChaoticDynamicalSystemLibrary.LuChen","text":"   LuChen()\n\nA system that switches shapes between the Lorenz and Chen attractors as the parameter c is varied from 12.7 to 28.5. Also called the Chen Celikovsky attractor\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0358980309317456\nLyapunov spectrum (estimated): Any[0.6651845739025707, 0.1450338199952451, -22.56999542505058]\nMaximum Lyapunov exponent (estimated): 0.3266868574498627\nMultiscale Entropy: 0.4483903807918106\nNon-autonomous: false\nPeriod: 2.3385\nPesin entropy: 0.8102183938978158\n\nReferences\n\nLu, Chen. Int J Bifurcat Chaos. 2002: 659-661.\n\nOriginal code from the dysts Python package\n\nclass LuChen(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = a * y - a * x\n        ydot = -x * z + c * y\n        zdot = x * y - b * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.LuChenCheng","page":"Home","title":"ChaoticDynamicalSystemLibrary.LuChenCheng","text":"   LuChenCheng()\n\nA four scroll attractor that reduces to Lorenz-like dynamics under bifurcations.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0293036172873244\nLyapunov spectrum (estimated): Any[0.35106210160478324, -0.012414362698175424, -11.556516575635818]\nMaximum Lyapunov exponent (estimated): 0.2612775880231121\nMultiscale Entropy: 0.6029763775293518\nNon-autonomous: false\nPeriod: 0.92333\nPesin entropy: 0.3510621518701211\n\nReferences\n\nLu, Chen, Cheng. Int J Bifurcat Chaos. 2004: 1507â€“1537.\n\nOriginal code from the dysts Python package\n\nclass LuChenCheng(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = -(a * b) / (a + b) * x - y * z + c\n        ydot = a * y + x * z\n        zdot = b * z + x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.MacArthur","page":"Home","title":"ChaoticDynamicalSystemLibrary.MacArthur","text":"   MacArthur()\n\nPopulation abundances in a plankton community, based on MacArthur's consumer resource model. Growth rates are determined using Liebig's law of the maximum\n\nStats\n\nEmbedding dimension: 10\nHamiltonian: false\nKaplan-Yorke dimension: 3.8961444775216614\nLyapunov spectrum (estimated): Any[0.1934617869736995, 0.004866584152339167, -0.0431132227766039, -0.17665092099562724, -0.30357752906614904, -0.30392441898183636, -0.30474608910196055, -0.3051840587615213, -0.3058908399877519, -17.37453227551654]\nMaximum Lyapunov exponent (estimated): 0.2494638510848618\nMultiscale Entropy: 0.7844902548776685\nNon-autonomous: false\nPeriod: 43.406\nPesin entropy: 0.19832837112603868\n\nReferences\n\nMacArthur, R. 1969. Species packing, and what competition minimizes. PNAS 64:1369. Parameter values taken from a model of phytoplankton in Huisman & Weissing. Nature 1999.\n\nOriginal code from the dysts Python package\n\nclass MacArthur(DynSys):\n    def growth_rate(self, rr):\n        u0 = rr / (self.k.T + rr)\n        u = self.r * u0.T\n        return np.min(u.T, axis=1)\n\n    def rhs(self, X, t):\n        nn, rr = X[:5], X[5:]\n        mu = self.growth_rate(rr)\n        nndot = nn * (mu - self.m)\n        rrdot = self.d * (self.s - rr) - np.matmul(self.c, (mu * nn))\n        return np.hstack([nndot, rrdot])\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.MackeyGlass","page":"Home","title":"ChaoticDynamicalSystemLibrary.MackeyGlass","text":"   MackeyGlass()\n\nA physiological circuit with time-delayed feedback. A standard delay dimension of three is used.\n\nStats\n\nEmbedding dimension: 10\nHamiltonian: false\nKaplan-Yorke dimension: 8.012917999650943\nLyapunov spectrum (estimated): Any[0.21081023801544096, 0.16332731438425996, -0.03580777756738295, -0.041336844485590406, -0.04889078450243534, -0.059836905162829496, -0.07714200039885702, -0.10872244658769878, -0.18584871959889662, -2.2412562118189827]\nMaximum Lyapunov exponent (estimated): 0.07287527454565443\nNon-autonomous: false\nPeriod: 5.9612230962292045\nPesin entropy: 0.3741375523997009\n\nReferences\n\nGlass, L. and Mackey, M. C. (1979). Pathological physiological conditions resulting from instabilities in physiological control systems. Ann. NY. Acad. Sci.\n\nOriginal code from the dysts Python package\n\nclass MackeyGlass(DynSysDelay):\n    @staticjit\n    def _rhs(x, xt, t, beta, gamma, n, tau):\n        xdot = beta * (xt / (1 + xt ** n)) - gamma * x\n        return xdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.MooreSpiegel","page":"Home","title":"ChaoticDynamicalSystemLibrary.MooreSpiegel","text":"   MooreSpiegel()\n\nA thermo-mechanical oscillator.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.3217713120052443\nLyapunov spectrum (estimated): Any[0.4074353399833356, -0.022079955878999143, -1.1975751283606624]\nMaximum Lyapunov exponent (estimated): 0.6976623003008144\nMultiscale Entropy: 0.5401952179209213\nNon-autonomous: false\nPeriod: 1.2887\nPesin entropy: 0.4076334003995097\n\nReferences\n\nMoore, Spiegel. A Thermally Excited Nonlinear Oscillator, Ap. J., 143, 871 (1966)\n\nOriginal code from the dysts Python package\n\nclass MooreSpiegel(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, eps):\n        xdot = y\n        ydot = a * z\n        zdot = -z + eps * y - y * x ** 2 - b * x\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.MultiChua","page":"Home","title":"ChaoticDynamicalSystemLibrary.MultiChua","text":"   MultiChua()\n\nMultiple interacting Chua electronic circuits.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0710214570482988\nLyapunov spectrum (estimated): Any[0.2210571234274344, -0.00140279701621115, -3.10264254580399]\nMaximum Lyapunov exponent (estimated): 1.462134784614238\nMultiscale Entropy: 0.8118881305702679\nNon-autonomous: false\nPeriod: 2.2586\nPesin entropy: 0.22151080996231726\n\nReferences\n\nMufcstak E. Yalcin, Johan A. K. Suykens, Joos Vandewalle. Cellular Neural Networks, Multi-Scroll Chaos And Synchronization. \n\nOriginal code from the dysts Python package\n\nclass MultiChua(DynSys):\n    def diode(self, x):\n        m, c = self.m, self.c\n        total = m[-1] * x\n        for i in range(1, 6):\n            total += 0.5 * (m[i - 1] - m[i]) * (np.abs(x + c[i]) - np.abs(x - c[i]))\n        return total\n\n    def rhs(self, X, t):\n        x, y, z = X\n        xdot = self.a * (y - self.diode(x))\n        ydot = x - y + z\n        zdot = -self.b * y\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.NewtonLiepnik","page":"Home","title":"ChaoticDynamicalSystemLibrary.NewtonLiepnik","text":"   NewtonLiepnik()\n\nEuler's equations for a rigid body, augmented with a linear feedback term.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2206092778719664\nLyapunov spectrum (estimated): Any[0.1723564207468104, -0.00036976661148194504, -0.7795789311467557]\nMaximum Lyapunov exponent (estimated): 0.14945341784639976\nMultiscale Entropy: 0.6322918700854281\nNon-autonomous: false\nPeriod: 8.5095\nPesin entropy: 0.17242608410350868\n\nReferences\n\nLeipnik, R. B., and T. A. Newton (1981). Double strange attractors in rigid body motion with linear feedback control. Physics Letters A 86.2 (1981): 63-67.\n\nOriginal code from the dysts Python package\n\nclass NewtonLiepnik(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = -a * x + y + 10 * y * z\n        ydot = -x - 0.4 * y + 5 * x * z\n        zdot = b * z - 5 * x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.NoseHoover","page":"Home","title":"ChaoticDynamicalSystemLibrary.NoseHoover","text":"   NoseHoover()\n\nFixed temperature molecular dynamics for a strained flow under a reduced order model.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 6.213204677134776\nLyapunov spectrum (estimated): Any[0.04757010871740569, 0.0013844486958287268, -0.011653762286922777]\nMaximum Lyapunov exponent (estimated): 0.010464383779400952\nMultiscale Entropy: 0.5656074689683536\nNon-autonomous: false\nPeriod: 5.8673\nPesin entropy: 0.04895455741323442\n\nReferences\n\nNose, S (1985). A unified formulation of the constant temperature molecular-dynamics methods. Journal of Chemical Physics (1984). Hoover, William G. Canonical dynamics: Equilibrium phase-space distributions. Phys. Rev. A. Hoover, William G., Anthony JC Ladd, and Bill Moran (1982). High-strain-rate plastic flow studied via nonequilibrium molecular dynamics. Physical Review Letters.\n\nOriginal code from the dysts Python package\n\nclass NoseHoover(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = y\n        ydot = -x + y * z\n        zdot = a - y ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.NuclearQuadrupole","page":"Home","title":"ChaoticDynamicalSystemLibrary.NuclearQuadrupole","text":"   NuclearQuadrupole()\n\nA quadrupole boson Hamiltonian that produces chaos via a resonance overlap mechanism\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: true\nKaplan-Yorke dimension: 4.280996083113027\nLyapunov spectrum (estimated): Any[0.27858365099437626, 0.06629535725881477, -0.00449888101008936, -0.2658004759134054]\nMaximum Lyapunov exponent (estimated): 0.29554197767663787\nMultiscale Entropy: 0.8209529097052416\nNon-autonomous: false\nPeriod: 6.023076923076923\nPesin entropy: 0.3448827969293456\n\nReferences\n\nBaran V. and Raduta A. A. (1998), International Journal of Modern Physics E\n\nOriginal code from the dysts Python package\n\nclass NuclearQuadrupole(DynSys):\n    @staticjit\n    def _rhs(q1, q2, p1, p2, t, a, b, d):\n        q1dot = a * p1\n        q2dot = a * p2\n        p1dot = - a * q1 + 3 / np.sqrt(2) * b * q1 ** 2 - 3 / np.sqrt(2) * b * q2 ** 2 - d * q1 ** 3 - d * q1 * q2 ** 2\n        p2dot = -a * q2 - 3 * np.sqrt(2) * b * q1 * q2 - d * q2 * q1 ** 2 - d * q2 ** 3\n        return q1dot, q2dot, p1dot, p2dot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.OscillatingFlow","page":"Home","title":"ChaoticDynamicalSystemLibrary.OscillatingFlow","text":"   OscillatingFlow()\n\nA model fluid flow that produces KAM tori. Original parameters have been rescaled by k\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.962629189215532\nLyapunov spectrum (estimated): Any[0.4274159768365289, -0.005029615144529367, -0.43888500460322705]\nMaximum Lyapunov exponent (estimated): 0.13470179997834794\nMultiscale Entropy: 0.6177682255070645\nNon-autonomous: true\nPeriod: 23.857\nPesin entropy: 0.4274159768365288\n\nReferences\n\nT. H. Solomon and J. P. Gollub, Phys. Rev. A 38, 6280 (1988).\n\nOriginal code from the dysts Python package\n\nclass OscillatingFlow(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, b, k, omega, u):\n        f = x + b * np.sin(z)\n        dx = u * np.cos(k * y) * np.sin(k * f)\n        dy = -u * np.sin(k * y) * np.cos(k * f)\n        dz = omega\n        return dx, dy, dz\n\n    def _postprocessing(self, x, y, z):\n        return np.cos(self.k * x), y, np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.PehlivanWei","page":"Home","title":"ChaoticDynamicalSystemLibrary.PehlivanWei","text":"   PehlivanWei()\n\nA system with quadratic nonlinearity, which undergoes Hopf bifurcations of codimension 1 and 2.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1563635563177295\nLyapunov spectrum (estimated): Any[0.09512327528959069, 0.0015323304198873254, -0.6168618108533457]\nMaximum Lyapunov exponent (estimated): 0.10415076085878888\nMultiscale Entropy: 0.6547493000137818\nNon-autonomous: false\nPeriod: 3.7487330316742087\nPesin entropy: 0.09665562724246173\n\nReferences\n\nPehlivan, Ihsan, and Wei Zhouchao (2012). Analysis, nonlinear control, and chaos generator circuit of another strange chaotic system.\n\nOriginal code from the dysts Python package\n\nclass PehlivanWei(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y - y * z\n        ydot = y + y * z - 2 * x\n        zdot = 2 - x * y - y ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Qi","page":"Home","title":"ChaoticDynamicalSystemLibrary.Qi","text":"   Qi()\n\nA hyperchaotic system with a wide power spectrum.\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: false\nKaplan-Yorke dimension: 2.498645226832379\nLyapunov spectrum (estimated): Any[2.0360429519545677, 0.1320125824983059, -4.347891883424509, -44.356041824978305]\nMaximum Lyapunov exponent (estimated): 2.1916060472989556\nMultiscale Entropy: 0.8855652233700573\nNon-autonomous: false\nPeriod: 0.40820999999999996\nPesin entropy: 2.168055534452874\n\nReferences\n\nG. Qi, M. A. van Wyk, B. J. van Wyk, and G. Chen, (2008). On a new hyperchaotic system. Physics Letters A.\n\nOriginal code from the dysts Python package\n\nclass Qi(DynSys):\n    @staticjit\n    def _rhs(x, y, z, w, t, a, b, c, d):\n        xdot = a * y - a * x + y * z * w\n        ydot = b * x + b * y - x * z * w\n        zdot = -c * z + x * y * w\n        wdot = -d * w + x * y * z\n        return xdot, ydot, zdot, wdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.QiChen","page":"Home","title":"ChaoticDynamicalSystemLibrary.QiChen","text":"   QiChen()\n\nA double-wing chaotic attractor that arises from two bistable attractors. The system has quadratic nonlinearity.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0917466081236316\nLyapunov spectrum (estimated): Any[3.8880075026301206, 0.13379585631170307, -43.8359895934497]\nMaximum Lyapunov exponent (estimated): 4.0275703123027435\nMultiscale Entropy: 0.846453868214798\nNon-autonomous: false\nPeriod: 0.39179\nPesin entropy: 4.021803358941824\n\nReferences\n\nQi et al. Chaos, Solitons & Fractals 2008.\n\nOriginal code from the dysts Python package\n\nclass QiChen(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = a * y - a * x + y * z\n        ydot = c * x + y - x * z\n        zdot = x * y - b * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.RabinovichFabrikant","page":"Home","title":"ChaoticDynamicalSystemLibrary.RabinovichFabrikant","text":"   RabinovichFabrikant()\n\nA reduced-order model of propagating waves in monequilibrium media.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.36076141745315\nLyapunov spectrum (estimated): Any[0.24233580922074083, 1.7068504600119996e-5, -0.6717710576786404]\nMaximum Lyapunov exponent (estimated): 0.2541443669572464\nMultiscale Entropy: 0.9189339042839536\nNon-autonomous: false\nPeriod: 2.3356\nPesin entropy: 0.24239107527154555\n\nReferences\n\nRabinovich, Mikhail I.; Fabrikant, A. L. (1979). Stochastic Self-Modulation of Waves in Nonequilibrium Media. Sov. Phys. JETP.\n\nOriginal code from the dysts Python package\n\nclass RabinovichFabrikant(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, g):\n        xdot = y * z - y + y * x ** 2 + g * x\n        ydot = 3 * x * z + x - x ** 3 + g * y\n        zdot = -2 * a * z  - 2 * x * y * z\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.RikitakeDynamo","page":"Home","title":"ChaoticDynamicalSystemLibrary.RikitakeDynamo","text":"   RikitakeDynamo()\n\nElectric current and magnetic field of two coupled disk dynamos.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0672834652602137\nLyapunov spectrum (estimated): Any[0.14571192786308473, 0.0007222098218782572, -2.1743990404663296]\nMaximum Lyapunov exponent (estimated): 0.1318127385277225\nMultiscale Entropy: 0.9664471212975273\nNon-autonomous: false\nPeriod: 5.8975\nPesin entropy: 0.14655639292019562\n\nReferences\n\nRikitake, T., Oscillations of a system of disk dynamos, Mathematical Proceedings of the Cambridge Philosophical Society, 1958.\n\nOriginal code from the dysts Python package\n\nclass RikitakeDynamo(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, mu):\n        xdot = -mu * x + y * z\n        ydot = -mu * y - a * x + x * z\n        zdot = 1 - x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Rossler","page":"Home","title":"ChaoticDynamicalSystemLibrary.Rossler","text":"   Rossler()\n\nSpiral-type chaos in a simple oscillator model.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0146095059018845\nLyapunov spectrum (estimated): Any[0.0763301393780693, 0.007522476799147231, -5.741024338716747]\nMaximum Lyapunov exponent (estimated): 0.15059688939547888\nMultiscale Entropy: 0.605878349292794\nNon-autonomous: false\nPeriod: 5.9086\nPesin entropy: 0.08385261617721652\n\nReferences\n\nRossler, O. E. (1976), An Equation for Continuous Chaos, Physics Letters, 57A (5): 3972013398,\n\nOriginal code from the dysts Python package\n\nclass Rossler(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c):\n        xdot = -y - z\n        ydot = x + a * y\n        zdot = b + z * x - c * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Sakarya","page":"Home","title":"ChaoticDynamicalSystemLibrary.Sakarya","text":"   Sakarya()\n\nAn attractor that arises due to merging of two disjoint bistable attractors.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.245095314885476\nLyapunov spectrum (estimated): Any[0.3080921246264039, 0.00035292037656675234, -1.2584697568737606]\nMaximum Lyapunov exponent (estimated): 0.26501036485491514\nMultiscale Entropy: 0.6082767822064958\nNon-autonomous: false\nPeriod: 4.9844\nPesin entropy: 0.3084450450029706\n\nReferences\n\nLi, Chunbiao, et al (2015). A novel four-wing strange attractor born in bistability. IEICE Electronics Express 12.4.\n\nOriginal code from the dysts Python package\n\nclass Sakarya(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, h, p, q, r, s):\n        xdot = a * x + h * y + s * y * z\n        ydot = -b * y - p * x + q * x * z\n        zdot = c * z - r * x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SaltonSea","page":"Home","title":"ChaoticDynamicalSystemLibrary.SaltonSea","text":"   SaltonSea()\n\nAn eco-epidemiological model of bird and fish abundances in the Salton sea of southern California.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0843843542474496\nLyapunov spectrum (estimated): Any[0.3914445015077359, -0.0037578848522063194, -4.592867667006148]\nMaximum Lyapunov exponent (estimated): 1.0702552017260383\nMultiscale Entropy: 0.9335269725171643\nNon-autonomous: false\nPeriod: 0.96738\nPesin entropy: 0.39160860195935765\n\nReferences\n\nUpadhyay, Bairagi, Kundu, Chattopadhyay (2007).Chaos in eco-epidemiological problem of the Salton Sea and its possible control. Applied mathematics and computation.\n\nOriginal code from the dysts Python package\n\nclass SaltonSea(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, d, k, lam, m, mu, r, th):\n        xdot = r * x * (1 - (x + y) / k) - lam * x * y\n        ydot = lam * x * y - m * y * z / (y + a) - mu * y\n        zdot = th * y * z / (y + a) - d * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SanUmSrisuchinwong","page":"Home","title":"ChaoticDynamicalSystemLibrary.SanUmSrisuchinwong","text":"   SanUmSrisuchinwong()\n\nA two-scroll attractor arising from dynamical equations with piecewise nonlinearities. Equivalent to the Wimol-Banlue system\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.194219372064799\nLyapunov spectrum (estimated): Any[0.23913890446639047, -0.0002916165416126154, -1.2296759041605134]\nMaximum Lyapunov exponent (estimated): 0.2606135207962152\nMultiscale Entropy: 0.9947542017597873\nNon-autonomous: false\nPeriod: 7.4654\nPesin entropy: 0.23946267672516214\n\nReferences\n\nSan-Um, Srisuchinwong. J. Comp 2012\n\nOriginal code from the dysts Python package\n\nclass SanUmSrisuchinwong(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = y - x\n        ydot = -z * np.tanh(x)\n        zdot = -a + x * y + np.abs(y)\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ShimizuMorioka","page":"Home","title":"ChaoticDynamicalSystemLibrary.ShimizuMorioka","text":"   ShimizuMorioka()\n\nA system that bifurcates from a symmetric limit cycle to an asymmetric one, similar to the Lorenz attractor.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0312187919639926\nLyapunov spectrum (estimated): Any[0.044032234819090736, -1.3942528300804223e-5, -1.409991553164768]\nMaximum Lyapunov exponent (estimated): 0.03577425334463406\nMultiscale Entropy: 0.7156563118943259\nNon-autonomous: false\nPeriod: 12.038\nPesin entropy: 0.044239420179671494\n\nReferences\n\nShimizu, Morioka. Phys Lett A. 1980: 201-204\n\nOriginal code from the dysts Python package\n\nclass ShimizuMorioka(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = y\n        ydot = x - a * y - x * z\n        zdot = -b * z + x ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottA","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottA","text":"   SprottA()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 60.66528307527488\nLyapunov spectrum (estimated): Any[0.029259920155059096, 0.004990159457687409, -0.0015561317158397701]\nMaximum Lyapunov exponent (estimated): 0.012993052652429771\nMultiscale Entropy: 0.5748267225365974\nNon-autonomous: false\nPeriod: 6.3728461538461545\nPesin entropy: 0.0343008088722448\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottA(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y\n        ydot = -x + y * z\n        zdot = 1 - y ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottB","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottB","text":"   SprottB()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1852994894688953\nLyapunov spectrum (estimated): Any[0.21987503866971636, 0.005187437926969091, -1.2145826242115807]\nMaximum Lyapunov exponent (estimated): 0.20674275256006883\nMultiscale Entropy: 0.8826029903839796\nNon-autonomous: false\nPeriod: 11.050142857142857\nPesin entropy: 0.2250624765966855\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottB(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y * z\n        ydot = x - y\n        zdot = 1 - x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottC","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottC","text":"   SprottC()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1529236029587073\nLyapunov spectrum (estimated): Any[0.17898394736414464, -0.0007304674803429964, -1.1644550651924115]\nMaximum Lyapunov exponent (estimated): 0.15806924766944033\nMultiscale Entropy: 1.14839462464542\nNon-autonomous: false\nPeriod: 8.8852\nPesin entropy: 0.17933456833596748\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottC(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y * z\n        ydot = x - y\n        zdot = 1 - x ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottD","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottD","text":"   SprottD()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0807565309303526\nLyapunov spectrum (estimated): Any[0.11415315682442645, 0.001787998513315278, -1.4601870646976078]\nMaximum Lyapunov exponent (estimated): 0.10170941886932346\nMultiscale Entropy: 1.0030259093693934\nNon-autonomous: false\nPeriod: 4.8333\nPesin entropy: 0.11594526886491094\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottD(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = -y\n        ydot = x + z\n        zdot = x * z + 3 * y ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottE","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottE","text":"   SprottE()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0894640654250147\nLyapunov spectrum (estimated): Any[0.09834470642927143, -0.00031069798260046597, -1.0953799295090543]\nMaximum Lyapunov exponent (estimated): 0.09016067590084897\nMultiscale Entropy: 0.8387888716672988\nNon-autonomous: false\nPeriod: 7.6275\nPesin entropy: 0.09866310814686535\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottE(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y * z\n        ydot = x ** 2 - y\n        zdot = 1 - 4 * x\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottF","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottF","text":"   SprottF()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2516153966506316\nLyapunov spectrum (estimated): Any[0.13246006583273318, 0.0192716855937824, -0.603011686855317]\nMaximum Lyapunov exponent (estimated): 0.1183090101484132\nMultiscale Entropy: 0.7674306147320477\nNon-autonomous: false\nPeriod: 19.244\nPesin entropy: 0.1517317514265156\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottF(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = y + z\n        ydot = -x + a * y\n        zdot = x ** 2 - z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottG","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottG","text":"   SprottG()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0519020031307744\nLyapunov spectrum (estimated): Any[0.03349131570257798, -0.0012749369106980868, -0.6182204265060449]\nMaximum Lyapunov exponent (estimated): 0.09067832253388744\nMultiscale Entropy: 0.6185493944257671\nNon-autonomous: false\nPeriod: 8.7097\nPesin entropy: 0.03403484153064641\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottG(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = a * x + z\n        ydot = x * z - y\n        zdot = -x + y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottH","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottH","text":"   SprottH()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2414973487697853\nLyapunov spectrum (estimated): Any[0.13871794302385684, 0.003501431527456669, -0.5889065665901029]\nMaximum Lyapunov exponent (estimated): 0.13100182470690253\nMultiscale Entropy: 0.6325364503922819\nNon-autonomous: false\nPeriod: 20.229\nPesin entropy: 0.14221937455131348\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottH(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = -y + z ** 2\n        ydot = x + a * y\n        zdot = x - z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottI","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottI","text":"   SprottI()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.019844528960972\nLyapunov spectrum (estimated): Any[0.020459651934364873, 9.478591964272237e-6, -1.031514712617076]\nMaximum Lyapunov exponent (estimated): 0.023218704376506836\nMultiscale Entropy: 0.5893805046352655\nNon-autonomous: false\nPeriod: 10.93\nPesin entropy: 0.02077411702709478\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottI(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = -a * y\n        ydot = x + z\n        zdot = x + y ** 2 - z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottJ","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottJ","text":"   SprottJ()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0221468017281006\nLyapunov spectrum (estimated): Any[0.04451808076432957, 0.0010621228852282804, -2.055842238064512]\nMaximum Lyapunov exponent (estimated): 0.12290789099642041\nMultiscale Entropy: 0.6352974298685767\nNon-autonomous: false\nPeriod: 4.836\nPesin entropy: 0.04588958821017871\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottJ(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = 2 * z\n        ydot = -2 * y + z\n        zdot = -x + y + y ** 2\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottJerk","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottJerk","text":"   SprottJerk()\n\nAn algebraidally simple flow depending on a third time derivative. Numerical integration of this attractor is extremely sensitive to the initial conditions\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.031190248069004\nLyapunov spectrum (estimated): Any[0.06738258231535933, -0.0007831911114099333, -2.1347047232043663]\nMaximum Lyapunov exponent (estimated): 0.08785190282162628\nMultiscale Entropy: 0.5314887786603959\nNon-autonomous: false\nPeriod: 11.921\nPesin entropy: 0.06776939078007471\n\nReferences\n\nSprott, J. C. Simplest dissipative chaotic flow. Physics Letters A (1997).\n\nOriginal code from the dysts Python package\n\nclass SprottJerk(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, mu):\n        xdot = y\n        ydot = z\n        zdot = -x + y ** 2 - mu * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottK","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottK","text":"   SprottK()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0417036451446204\nLyapunov spectrum (estimated): Any[0.03778259119323125, -0.0005109461395399151, -0.8934722146671759]\nMaximum Lyapunov exponent (estimated): 0.05962593786799159\nMultiscale Entropy: 0.6562812206790845\nNon-autonomous: false\nPeriod: 7.006\nPesin entropy: 0.03788160511007809\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottK(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = x * y - z\n        ydot = x - y\n        zdot = x + a * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottL","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottL","text":"   SprottL()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0329815956000377\nLyapunov spectrum (estimated): Any[0.03407149258791976, -0.000391471796353918, -1.012962157697122]\nMaximum Lyapunov exponent (estimated): 0.09216197583296963\nMultiscale Entropy: 0.5605870039438788\nNon-autonomous: false\nPeriod: 6.7262\nPesin entropy: 0.0343958205328805\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottL(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = y + b * z\n        ydot = a * x ** 2 - y\n        zdot = 1 - x\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottM","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottM","text":"   SprottM()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.04996202872584\nLyapunov spectrum (estimated): Any[0.05230117379497565, -0.00033063791832836577, -1.0391447706177515]\nMaximum Lyapunov exponent (estimated): 0.08422043130700084\nMultiscale Entropy: 0.7481178461456197\nNon-autonomous: false\nPeriod: 5.3644\nPesin entropy: 0.05234518101225785\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottM(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = -z\n        ydot = -x ** 2 - y\n        zdot = a + a * x + y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottMore","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottMore","text":"   SprottMore()\n\nA multifractal system with a nearly 3D attractor\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.999952495039482\nLyapunov spectrum (estimated): Any[0.32499834596046606, -0.0001641583999746131, -0.31918544080126926]\nMaximum Lyapunov exponent (estimated): 1.0946909441433958\nMultiscale Entropy: 0.6370154977546665\nNon-autonomous: false\nPeriod: 6.62095890410959\nPesin entropy: 0.32515558132375566\n\nReferences\n\nSprott, J. C. (2020). Do We Need More Chaos Examples? Chaos Theory and Applications 2(2),1-3, 2020.\n\nOriginal code from the dysts Python package\n\nclass SprottMore(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y\n        ydot = -x - np.sign(z) * y\n        zdot = y ** 2 - np.exp(-(x ** 2))\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottN","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottN","text":"   SprottN()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.028951405806632\nLyapunov spectrum (estimated): Any[0.06095861449194353, 6.560209716837452e-5, -2.101648044064128]\nMaximum Lyapunov exponent (estimated): 0.11869612209728901\nMultiscale Entropy: 0.6385218945868028\nNon-autonomous: false\nPeriod: 4.8135\nPesin entropy: 0.061478272616693266\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottN(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = -2 * y\n        ydot = x + z ** 2\n        zdot = 1 + y - 2 * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottO","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottO","text":"   SprottO()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2474645346215256\nLyapunov spectrum (estimated): Any[0.06685684927644238, 0.011533284505120292, -0.3165440349833235]\nMaximum Lyapunov exponent (estimated): 0.09141077854590315\nMultiscale Entropy: 0.4161154943097029\nNon-autonomous: false\nPeriod: 9.755\nPesin entropy: 0.07839013378156268\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottO(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = y\n        ydot = x - z\n        zdot = x + x * z + a * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottP","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottP","text":"   SprottP()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2122245136720187\nLyapunov spectrum (estimated): Any[0.1026165705645786, 0.00025136328640969387, -0.4843551814513015]\nMaximum Lyapunov exponent (estimated): 0.1064676723437159\nMultiscale Entropy: 0.8486396469370624\nNon-autonomous: false\nPeriod: 5.3414\nPesin entropy: 0.10329419803150507\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottP(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a):\n        xdot = a * y + z\n        ydot = -x + y ** 2\n        zdot = x + y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottQ","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottQ","text":"   SprottQ()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.2246852931286063\nLyapunov spectrum (estimated): Any[0.13698250147166127, 0.0010386716745898255, -0.6140516336902575]\nMaximum Lyapunov exponent (estimated): 0.17169784338063596\nMultiscale Entropy: 0.8105158145249107\nNon-autonomous: false\nPeriod: 4.8443\nPesin entropy: 0.13852213114060488\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottQ(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = -z\n        ydot = x - y\n        zdot = a * x + y ** 2 + b * z\n        return (xdot, ydot, zdot)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottR","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottR","text":"   SprottR()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.071744469374985\nLyapunov spectrum (estimated): Any[0.07608481335025485, 0.0013697096816499383, -1.0784000269941107]\nMaximum Lyapunov exponent (estimated): 0.09661415277799693\nMultiscale Entropy: 0.5877166245477188\nNon-autonomous: false\nPeriod: 7.0133\nPesin entropy: 0.07840404228136309\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottR(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = a - y\n        ydot = b + z\n        zdot = x * y - z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottS","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottS","text":"   SprottS()\n\nA member of the Sprott family of algebraically-simple chaotic sytems.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.182390107009358\nLyapunov spectrum (estimated): Any[0.2149312025337423, 0.0030194370306177213, -1.1945344436340624]\nMaximum Lyapunov exponent (estimated): 0.2737629235389973\nMultiscale Entropy: 0.6690400524585065\nNon-autonomous: false\nPeriod: 3.3505\nPesin entropy: 0.21876911249150574\n\nReferences\n\nSprott (1994). Some simple chaotic flows. Physical Review E (1994).\n\nOriginal code from the dysts Python package\n\nclass SprottS(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = -x - 4 * y\n        ydot = x + z ** 2\n        zdot = 1 + x\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SprottTorus","page":"Home","title":"ChaoticDynamicalSystemLibrary.SprottTorus","text":"   SprottTorus()\n\nA multiattractor system that goes to a torus or a complex attractor depending on the initial conditions.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.759693065535405\nLyapunov spectrum (estimated): Any[0.29656066211909027, 0.0005468818242604863, -0.3910853761095065]\nMaximum Lyapunov exponent (estimated): 0.1056964344650892\nMultiscale Entropy: 0.9562901894463037\nNon-autonomous: false\nPeriod: 13.607\nPesin entropy: 0.29710937347161515\n\nReferences\n\nSprott Physics Letters A 2014\n\nOriginal code from the dysts Python package\n\nclass SprottTorus(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t):\n        xdot = y + 2 * x * y + x * z\n        ydot = 1 - 2 * x ** 2 + y * z\n        zdot = x - x ** 2 - y ** 2\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.StickSlipOscillator","page":"Home","title":"ChaoticDynamicalSystemLibrary.StickSlipOscillator","text":"   StickSlipOscillator()\n\nA weakly forced (quasiautonomous) oscillator with dynamics similar to stick-slip friction. The parameter gamma controls the transition to chaos.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 5.682155291949877\nLyapunov spectrum (estimated): Any[0.07073329226101453, 3.356854711815694e-5, -0.02131392884593247]\nMaximum Lyapunov exponent (estimated): 0.06406131604734494\nMultiscale Entropy: 0.9213029740441252\nNon-autonomous: true\nPeriod: 1.6129\nPesin entropy: 0.07108101456222432\n\nReferences\n\nAwrejcewicz, Jan, and M. M. Holicke (1999). Int J of Bifurcation and Chaos.\n\nOriginal code from the dysts Python package\n\nclass StickSlipOscillator(DynSys):\n    def _t(self, v):\n        return self.t0 * np.sign(v) - self.alpha * v + self.beta * v ** 3\n\n    @staticjit\n    def _rhs(x, v, th, t, a, alpha, b, beta, eps, gamma, t0, vs, w):\n        tq = t0 * np.sign(v - vs) - alpha * v + beta * (v - vs) ** 3\n        xdot = v\n        vdot = eps * (gamma * np.cos(th) - tq) + a * x - b * x ** 3\n        thdot = w\n        return xdot, vdot, thdot\n\n    @staticjit\n    def _postprocessing(x, v, th):\n        return x, v, np.cos(th)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.SwingingAtwood","page":"Home","title":"ChaoticDynamicalSystemLibrary.SwingingAtwood","text":"   SwingingAtwood()\n\nA mechanical system consisting of two swinging weights connected by ropes and pulleys. This is only chaotic when m2 is sufficiently larger than m1, and there are nonzero initial momenta\n\nStats\n\nEmbedding dimension: 4\nHamiltonian: true\nKaplan-Yorke dimension: 4.0198847313975445\nLyapunov spectrum (estimated): Any[7.735006558021491, 3.0380875684439133, -3.002075505122432, -7.664246463289054]\nMaximum Lyapunov exponent (estimated): 1.0111284961954359\nNon-autonomous: false\nPeriod: 0.3417647058823529\nPesin entropy: 10.773094126465404\n\nReferences\n\nTufillaro, Nicholas B.; Abbott, Tyler A.; Griffiths, David J. (1984). Swinging Atwood's Machine. American Journal of Physics. 52 (10): 895â€“903.\n\nOriginal code from the dysts Python package\n\nclass SwingingAtwood(DynSys):\n    @staticjit\n    def _rhs(r, th, pr, pth, t, m1, m2):\n        g = 9.82\n        rdot = pr / (m1 + m2)\n        thdot = pth / (m1 * r ** 2)\n        prdot = pth ** 2 / (m1 * r ** 3) - m2 * g + m1 * g * np.cos(th)\n        pthdot = -m1 * g * r * np.sin(th)\n        return rdot, thdot, prdot, pthdot\n\n    @staticjit\n    def _postprocessing(r, th, pr, pth):\n        return r, np.sin(th), pr, pth\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Thomas","page":"Home","title":"ChaoticDynamicalSystemLibrary.Thomas","text":"   Thomas()\n\nA cyclically-symmetric attractor correspondng to a frictionally-damped particle traversing a 3D lattice of forces\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1271136075295507\nLyapunov spectrum (estimated): Any[0.7589685797630259, 0.057355308262307496, -6.421950974462397]\nMaximum Lyapunov exponent (estimated): 0.6324054000339867\nMultiscale Entropy: 0.9921951854111759\nNon-autonomous: false\nPeriod: 4.969\nPesin entropy: 0.8163238880253334\n\nReferences\n\nThomas, Rene (1999). Deterministic chaos seen in terms of feedback circuits: Analysis, synthesis, labyrinth chaos. Int. J. Bifurc. Chaos.\n\nOriginal code from the dysts Python package\n\nclass Thomas(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b):\n        xdot = -a * x + b * np.sin(y)\n        ydot = -a * y + b * np.sin(z)\n        zdot = -a * z + b * np.sin(x)\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.Torus","page":"Home","title":"ChaoticDynamicalSystemLibrary.Torus","text":"   Torus()\n\nA minimal quasiperiodic flow on a torus. All lyapunov exponents and related quantities are zero\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0\nLyapunov spectrum (estimated): Any[0.0, 0.0, 0.0]\nMaximum Lyapunov exponent (estimated): 0.00817284128815307\nMultiscale Entropy: 0.47330913201518593\nNon-autonomous: false\nPeriod: 6.36\nPesin entropy: 0.0\n\nReferences\n\nSee, for example, Strogatz (1994). Nonlinear Dynamics and Chaos.\n\nOriginal code from the dysts Python package\n\nclass Torus(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, n, r):\n        xdot = (-a * n * np.sin(n * t)) * np.cos(t) - (r + a * np.cos(n * t)) * np.sin(\n            t\n        )\n        ydot = (-a * n * np.sin(n * t)) * np.sin(t) + (r + a * np.cos(n * t)) * np.cos(\n            t\n        )\n        zdot = a * n * np.cos(n * t)\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.TurchinHanski","page":"Home","title":"ChaoticDynamicalSystemLibrary.TurchinHanski","text":"   TurchinHanski()\n\nA chaotic three species food web. The species growth rate has been increased from the default parameters in the original paper, in order to ensure that the system exhibits sustained chaotic oscillations.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 1.2053069221786739\nLyapunov spectrum (estimated): Any[0.03719830596656144, -0.181183885924572, -2.522759887828014]\nMaximum Lyapunov exponent (estimated): 0.12906862565697674\nMultiscale Entropy: 0.4989636261373046\nNon-autonomous: true\nPeriod: 4.40529411764706\nPesin entropy: 0.03719830596656144\n\nReferences\n\nTurchin, Hanski. The American Naturalist 1997. Turchin, Hanski. Ecology 2000\n\nOriginal code from the dysts Python package\n\nclass TurchinHanski(DynSys):\n    @staticjit\n    def _rhs(n, p, z, t, a, d, e, g, h, r, s):\n        ndot = (\n            r * (1 - e * np.sin(z)) * n\n            - r * (n ** 2)\n            - g * (n ** 2) / (n ** 2 + h ** 2)\n            - a * n * p / (n + d)\n        )\n        pdot = s * (1 - e * np.sin(z)) * p - s * (p ** 2) / n\n        zdot = 2 * np.pi\n        return ndot, pdot, zdot\n\n    @staticjit\n    def _postprocessing(x, y, z):\n        return x, y, np.sin(z)\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.VallisElNino","page":"Home","title":"ChaoticDynamicalSystemLibrary.VallisElNino","text":"   VallisElNino()\n\nAtmospheric temperature fluctuations with annual forcing.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1205065379188333\nLyapunov spectrum (estimated): Any[0.6561566154431996, 0.022689184568283626, -5.6332694618503885]\nMaximum Lyapunov exponent (estimated): 0.5477586276153029\nMultiscale Entropy: 0.9058707360850027\nNon-autonomous: false\nPeriod: 2.2087\nPesin entropy: 0.6788458000114831\n\nReferences\n\nVallis GK. Conceptual models of El Nio and the southern oscillation. J Geophys Res 1988\n\nOriginal code from the dysts Python package\n\nclass VallisElNino(DynSys):\n    @staticmethod\n    def _rhs(x, y, z, t, b, c, p):\n        xdot = b * y - c * x - c * p\n        ydot = -y + x * z\n        zdot = -z - x * y + 1\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.WangSun","page":"Home","title":"ChaoticDynamicalSystemLibrary.WangSun","text":"   WangSun()\n\nA four-scroll attractor\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0595560098996604\nLyapunov spectrum (estimated): Any[0.07990874520682271, -0.001043918775422804, -1.3240808432405]\nMaximum Lyapunov exponent (estimated): 0.06735463002480017\nMultiscale Entropy: 0.9045422097501858\nNon-autonomous: false\nPeriod: 26.958\nPesin entropy: 0.07994326076367073\n\nReferences\n\nWang, Z., Sun, Y., van Wyk, B. J., Qi, G. & van Wyk, M. A (2009). A 3-D four-wing attractor and its analysis. Brazilian J. Phys. 39.\n\nOriginal code from the dysts Python package\n\nclass WangSun(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, d, e, f, q):\n        xdot = a * x + q * y * z\n        ydot = b * x + d * y - x * z\n        zdot = e * z + f * x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.WindmiReduced","page":"Home","title":"ChaoticDynamicalSystemLibrary.WindmiReduced","text":"   WindmiReduced()\n\nEnergy transfer into the ionosphere and magnetosphere by the solar wind. The parameter vsw controls the onset of chaos.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0947817139683895\nLyapunov spectrum (estimated): Any[0.15595238514031914, 9.695760899839663e-5, -1.6450480911820564]\nMaximum Lyapunov exponent (estimated): 0.403521000622694\nMultiscale Entropy: 0.5896070173085494\nNon-autonomous: false\nPeriod: 4.6733\nPesin entropy: 0.15635149449218705\n\nReferences\n\nSmith, Thiffeault, Horton. J Geophys Res. 2000. Horton, Weigel, Sprott. Chaos 2001.\n\nOriginal code from the dysts Python package\n\nclass WindmiReduced(DynSys):\n    @staticjit\n    def _rhs(i, v, p, t, a1, b1, b2, b3, d1, vsw):\n        idot = a1 * (vsw - v)\n        vdot = b1 * i - b2 * p ** 1 / 2 - b3 * v\n        pdot = (\n            vsw ** 2 - p ** (5 / 4) * vsw ** (1 / 2) * (1 + np.tanh(d1 * (i - 1))) / 2\n        )\n        return idot, vdot, pdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.YuWang","page":"Home","title":"ChaoticDynamicalSystemLibrary.YuWang","text":"   YuWang()\n\nA temperature-compensation circuit with an operational amplifier\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.1703721122420614\nLyapunov spectrum (estimated): Any[2.459880656234634, -0.07297917814211805, -14.00993065520751]\nMaximum Lyapunov exponent (estimated): 1.8525516537708415\nMultiscale Entropy: 0.6340382196367295\nNon-autonomous: false\nPeriod: 1.3366\nPesin entropy: 2.459880656234634\n\nReferences\n\nYu, Wang (2012). A novel three dimension autonomous chaotic system with a quadratic exponential nonlinear term. Eng Techn & Applied Science Research.\n\nOriginal code from the dysts Python package\n\nclass YuWang(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d):\n        xdot = a * (y - x)\n        ydot = b * x - c * x * z\n        zdot = np.exp(x * y) - d * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.YuWang2","page":"Home","title":"ChaoticDynamicalSystemLibrary.YuWang2","text":"   YuWang2()\n\nAn alternative temperature-compensation circuit with an operational amplifier\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.0619881661890873\nLyapunov spectrum (estimated): Any[0.802715215563475, 0.007966964664720393, -13.078014115524866]\nMaximum Lyapunov exponent (estimated): 1.1576066800869989\nMultiscale Entropy: 0.9335570471768684\nNon-autonomous: false\nPeriod: 0.39265\nPesin entropy: 0.8106827804626555\n\nReferences\n\nYu, Wang (2012). A novel three dimension autonomous chaotic system with a quadratic exponential nonlinear term. Eng Techn & Applied Science Research.\n\nOriginal code from the dysts Python package\n\nclass YuWang2(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d):\n        xdot = a * (y - x)\n        ydot = b * x - c * x * z\n        zdot = np.cosh(x * y) - d * z\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"},{"location":"#ChaoticDynamicalSystemLibrary.ZhouChen","page":"Home","title":"ChaoticDynamicalSystemLibrary.ZhouChen","text":"   ZhouChen()\n\nA feedback circuit model.\n\nStats\n\nEmbedding dimension: 3\nHamiltonian: false\nKaplan-Yorke dimension: 2.045920730005392\nLyapunov spectrum (estimated): Any[0.5917259125455694, 0.005203946388490041, -12.999237688229242]\nMaximum Lyapunov exponent (estimated): 0.6828000288089435\nMultiscale Entropy: 0.7337896982114851\nNon-autonomous: false\nPeriod: 0.87518\nPesin entropy: 0.5969734164748293\n\nReferences\n\nZhou, Chen (2004). A simple smooth chaotic system with a 3-layer attractor. Int J Bifurcat Chaos, 2004\n\nOriginal code from the dysts Python package\n\nclass ZhouChen(DynSys):\n    @staticjit\n    def _rhs(x, y, z, t, a, b, c, d, e):\n        xdot = a * x + b * y + y * z\n        ydot = c * y - x * z + d * y * z\n        zdot = e * z - x * y\n        return xdot, ydot, zdot\n\n\n\n\n\n","category":"function"}]
}
